{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"07abd5794b5a4fea942dbdcf4c1f3476":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_cd02ea41ea4647cb8b44cd1625fcb79f","IPY_MODEL_b641168431de44bab012bc6a6ce3bcd2","IPY_MODEL_d59987ec11c34223a7c7639c308c5e8b"],"layout":"IPY_MODEL_57070e40d543455ca3544b53edd5d169"}},"cd02ea41ea4647cb8b44cd1625fcb79f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_4aac558ee4c44cfbb9a2c050628b63ed","placeholder":"​","style":"IPY_MODEL_d661933177e64ba2a45a626cb6b21e94","value":"tokenizer_config.json: 100%"}},"b641168431de44bab012bc6a6ce3bcd2":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_cf68a1727933496e868b98fb04f18f67","max":48,"min":0,"orientation":"horizontal","style":"IPY_MODEL_9bb9c76797a949428567d8766b4fb68c","value":48}},"d59987ec11c34223a7c7639c308c5e8b":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d65051cf3dd043d3a39b3b0659418d72","placeholder":"​","style":"IPY_MODEL_ee7f58b6c3fd43c7a07924974634eaeb","value":" 48.0/48.0 [00:00&lt;00:00, 3.97kB/s]"}},"57070e40d543455ca3544b53edd5d169":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4aac558ee4c44cfbb9a2c050628b63ed":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d661933177e64ba2a45a626cb6b21e94":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"cf68a1727933496e868b98fb04f18f67":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9bb9c76797a949428567d8766b4fb68c":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"d65051cf3dd043d3a39b3b0659418d72":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ee7f58b6c3fd43c7a07924974634eaeb":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d9cc8a76d79749e79e281e184bacc4d8":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_72319fe64d114746ae0f529b81fa83a0","IPY_MODEL_4875355869e549c4934723fedeb17ae8","IPY_MODEL_ebe30e50c2994630881e599832cbd5f8"],"layout":"IPY_MODEL_9cdf5f1b4f2540579e93c22007a4b813"}},"72319fe64d114746ae0f529b81fa83a0":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0bd5a2e2061f47d4a5c074af7d19070d","placeholder":"​","style":"IPY_MODEL_efccc3a8c86b414dbc08afc176b9e15d","value":"config.json: 100%"}},"4875355869e549c4934723fedeb17ae8":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_01c72c6ca852448c9eccc1255ad25209","max":483,"min":0,"orientation":"horizontal","style":"IPY_MODEL_8ff6dce2b6e94e76891d39b423ab108c","value":483}},"ebe30e50c2994630881e599832cbd5f8":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a418b0613a744735a386b4aeb988edab","placeholder":"​","style":"IPY_MODEL_e78afc101250467eadc95a2d770f3094","value":" 483/483 [00:00&lt;00:00, 43.1kB/s]"}},"9cdf5f1b4f2540579e93c22007a4b813":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0bd5a2e2061f47d4a5c074af7d19070d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"efccc3a8c86b414dbc08afc176b9e15d":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"01c72c6ca852448c9eccc1255ad25209":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8ff6dce2b6e94e76891d39b423ab108c":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"a418b0613a744735a386b4aeb988edab":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e78afc101250467eadc95a2d770f3094":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"450e9ec466a94398870af000047fb681":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_d86d54e4e35f44b0b9ca706a9fe08eb3","IPY_MODEL_61ac3bd8747a4aa29654878a6a522090","IPY_MODEL_e4b1f698355a42a7a162afde7781f6ef"],"layout":"IPY_MODEL_be1387b0b240418195ec2edf4b31e447"}},"d86d54e4e35f44b0b9ca706a9fe08eb3":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_6fab88f68f754fd2a504aea348ce452f","placeholder":"​","style":"IPY_MODEL_dff3d5452f664d48a503fb0937ce3139","value":"vocab.txt: 100%"}},"61ac3bd8747a4aa29654878a6a522090":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_ec09b8f0956c45fc95d9eaef30958dcb","max":231508,"min":0,"orientation":"horizontal","style":"IPY_MODEL_af735e8fb03145b3a9de471a0d505634","value":231508}},"e4b1f698355a42a7a162afde7781f6ef":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_6499886503264998b50cdbb980aba115","placeholder":"​","style":"IPY_MODEL_9c76798fd5c841d2914033fa11667ea2","value":" 232k/232k [00:00&lt;00:00, 12.2MB/s]"}},"be1387b0b240418195ec2edf4b31e447":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6fab88f68f754fd2a504aea348ce452f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"dff3d5452f664d48a503fb0937ce3139":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ec09b8f0956c45fc95d9eaef30958dcb":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"af735e8fb03145b3a9de471a0d505634":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"6499886503264998b50cdbb980aba115":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9c76798fd5c841d2914033fa11667ea2":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"379cfc1e46ab43b8bc31ddab2366e581":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_669a0ab8d7694ab4b27a3101584eca8d","IPY_MODEL_e52cdd229ebf43308d0a4ea2aedbcc53","IPY_MODEL_fe9ed98c1d324acbb92a74acd8bdb0a2"],"layout":"IPY_MODEL_b5dd1584891748aeb05c0ff7dce1fecf"}},"669a0ab8d7694ab4b27a3101584eca8d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_844c204bfaf148b0acf83d68539a8800","placeholder":"​","style":"IPY_MODEL_401863c065054545a57a7327e94ea504","value":"tokenizer.json: 100%"}},"e52cdd229ebf43308d0a4ea2aedbcc53":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_a2406f43126e4a4d9d8d431f0dfa82e1","max":466062,"min":0,"orientation":"horizontal","style":"IPY_MODEL_b3f420d5137e40358881095817166b52","value":466062}},"fe9ed98c1d324acbb92a74acd8bdb0a2":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_510a6b02fa6e4c80a2ae2aa7ebbf64d9","placeholder":"​","style":"IPY_MODEL_f5c2dac386324af4b25f09c1bb3e1308","value":" 466k/466k [00:00&lt;00:00, 24.4MB/s]"}},"b5dd1584891748aeb05c0ff7dce1fecf":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"844c204bfaf148b0acf83d68539a8800":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"401863c065054545a57a7327e94ea504":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a2406f43126e4a4d9d8d431f0dfa82e1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b3f420d5137e40358881095817166b52":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"510a6b02fa6e4c80a2ae2aa7ebbf64d9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f5c2dac386324af4b25f09c1bb3e1308":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"255e11f816fe4e18812a796c8204104e":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_65c518baab2e43c9bfd4c5c5383f2194","IPY_MODEL_6564d82866054e7280db3568277255e4","IPY_MODEL_0d2002d8b5664293ab484913e1900a38"],"layout":"IPY_MODEL_518810c5e8324ced92d75bf0e415d1e3"}},"65c518baab2e43c9bfd4c5c5383f2194":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_2c164b79ea904c3793b6d7129ffcfd89","placeholder":"​","style":"IPY_MODEL_e4892460193b440c9c0a9849689a36a6","value":"Map: 100%"}},"6564d82866054e7280db3568277255e4":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_faab01328f2744c6b7ddec1a2f18c785","max":696,"min":0,"orientation":"horizontal","style":"IPY_MODEL_12ad62998054459292316f5598416b8d","value":696}},"0d2002d8b5664293ab484913e1900a38":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_54033db0ea0e4002b00a3567edcfbbd7","placeholder":"​","style":"IPY_MODEL_ac3fc871e93440f4b5e8001c68a9d474","value":" 696/696 [00:00&lt;00:00, 1961.02 examples/s]"}},"518810c5e8324ced92d75bf0e415d1e3":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2c164b79ea904c3793b6d7129ffcfd89":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e4892460193b440c9c0a9849689a36a6":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"faab01328f2744c6b7ddec1a2f18c785":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"12ad62998054459292316f5598416b8d":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"54033db0ea0e4002b00a3567edcfbbd7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ac3fc871e93440f4b5e8001c68a9d474":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d2af2dc6d58c47a5a7e56f968421982c":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_a89af2eaa87c4ecd90084dc659f75f67","IPY_MODEL_6f105ad44bb14bea96e033b649311787","IPY_MODEL_cff3d61935a54d878e9a509eacfeab6b"],"layout":"IPY_MODEL_8388a7fd42004e4383b43802dbe51e2e"}},"a89af2eaa87c4ecd90084dc659f75f67":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0e4e006720234bb5a30970e07a3fc113","placeholder":"​","style":"IPY_MODEL_b52fb80adb7d45d7b606978677bde477","value":"Map: 100%"}},"6f105ad44bb14bea96e033b649311787":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_6eaff611f8844cf6ab417728065206b6","max":199,"min":0,"orientation":"horizontal","style":"IPY_MODEL_709e8e2e45f4422c854f252f7d7232e0","value":199}},"cff3d61935a54d878e9a509eacfeab6b":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0a46f7be15f940e08accc706f7409f76","placeholder":"​","style":"IPY_MODEL_2ecfa2aa1f6941c08bc62bc0944af065","value":" 199/199 [00:00&lt;00:00, 1665.72 examples/s]"}},"8388a7fd42004e4383b43802dbe51e2e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0e4e006720234bb5a30970e07a3fc113":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b52fb80adb7d45d7b606978677bde477":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"6eaff611f8844cf6ab417728065206b6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"709e8e2e45f4422c854f252f7d7232e0":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"0a46f7be15f940e08accc706f7409f76":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2ecfa2aa1f6941c08bc62bc0944af065":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"c2afac0d94464410bc58159bc35e2157":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_d14c58579fa145d49bb6e1368dbb1a9e","IPY_MODEL_510a770cd0704cdfbc41db2a609928d4","IPY_MODEL_5f71f4a1e7b9425589053ec875536470"],"layout":"IPY_MODEL_67e2757779dd4ec5aeb8b79f35b296e8"}},"d14c58579fa145d49bb6e1368dbb1a9e":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0ff9e654efdb4a7a90aa7e88e1c041eb","placeholder":"​","style":"IPY_MODEL_8b0eb6b8552a44eeb201e6adab09ffde","value":"Map: 100%"}},"510a770cd0704cdfbc41db2a609928d4":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_843e51cbc22043f39302c1d6b1f52798","max":100,"min":0,"orientation":"horizontal","style":"IPY_MODEL_13806f98eb9e4e7a91e6a696d5e7fb1f","value":100}},"5f71f4a1e7b9425589053ec875536470":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_01e412f61bf74dce8e4f7d7dbceadd27","placeholder":"​","style":"IPY_MODEL_05aea10012794f4f8a90acbea8c4db54","value":" 100/100 [00:00&lt;00:00, 1065.87 examples/s]"}},"67e2757779dd4ec5aeb8b79f35b296e8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0ff9e654efdb4a7a90aa7e88e1c041eb":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8b0eb6b8552a44eeb201e6adab09ffde":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"843e51cbc22043f39302c1d6b1f52798":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"13806f98eb9e4e7a91e6a696d5e7fb1f":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"01e412f61bf74dce8e4f7d7dbceadd27":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"05aea10012794f4f8a90acbea8c4db54":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a880a58c70564bcc9042c3c947c6b3e6":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_7591868119c9434a8f5eff4a66c980a9","IPY_MODEL_5258b8e90e6c4d379c20b9ac5207fbe0","IPY_MODEL_892cb97eba604f60a8aedbef1eda8a9f"],"layout":"IPY_MODEL_b0f906f0a95b44629d38082a1944e5cd"}},"7591868119c9434a8f5eff4a66c980a9":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_4abf635dc37f4291a96c3c64798530a7","placeholder":"​","style":"IPY_MODEL_eb31cad4a9984cf6baa40649160edcb9","value":"tokenizer_config.json: 100%"}},"5258b8e90e6c4d379c20b9ac5207fbe0":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_edf3f74c3e2d447d867d00271d67fe8b","max":48,"min":0,"orientation":"horizontal","style":"IPY_MODEL_9ee86ad9b1b5493ab5689d00bed65a5a","value":48}},"892cb97eba604f60a8aedbef1eda8a9f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_272dc401cfae4a95943f1a13a97b8834","placeholder":"​","style":"IPY_MODEL_bfbf2ea572624a0fa0a7f740e504aecd","value":" 48.0/48.0 [00:00&lt;00:00, 4.01kB/s]"}},"b0f906f0a95b44629d38082a1944e5cd":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4abf635dc37f4291a96c3c64798530a7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"eb31cad4a9984cf6baa40649160edcb9":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"edf3f74c3e2d447d867d00271d67fe8b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9ee86ad9b1b5493ab5689d00bed65a5a":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"272dc401cfae4a95943f1a13a97b8834":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bfbf2ea572624a0fa0a7f740e504aecd":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"bba92530685f414d82a40a5244479c6d":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_f63453f5f98a49b18d08ee0821822690","IPY_MODEL_1d6a88e8c0e6485dac0f6811a91bbd32","IPY_MODEL_8a3cd7a8b4b74d9d91be7efe69ffa98d"],"layout":"IPY_MODEL_8f545355f9744d54bd773d481362b7ba"}},"f63453f5f98a49b18d08ee0821822690":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_afe6b20a020f44548015a6d149407e33","placeholder":"​","style":"IPY_MODEL_1914f9f497df49dbbae32eed8dfd5da5","value":"config.json: 100%"}},"1d6a88e8c0e6485dac0f6811a91bbd32":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_47cf0e7e48f744c6bebf8a4727666946","max":483,"min":0,"orientation":"horizontal","style":"IPY_MODEL_9d68267b48f54cfcb1137b41a44748df","value":483}},"8a3cd7a8b4b74d9d91be7efe69ffa98d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f06323bda2bd4736a503ea0592cc5586","placeholder":"​","style":"IPY_MODEL_17054c02452f4bdd881926b8f053c64b","value":" 483/483 [00:00&lt;00:00, 47.1kB/s]"}},"8f545355f9744d54bd773d481362b7ba":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"afe6b20a020f44548015a6d149407e33":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1914f9f497df49dbbae32eed8dfd5da5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"47cf0e7e48f744c6bebf8a4727666946":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9d68267b48f54cfcb1137b41a44748df":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"f06323bda2bd4736a503ea0592cc5586":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"17054c02452f4bdd881926b8f053c64b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"7d8ddee4f3694cfa985cad7963227e54":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_4c87f36097994b588ad615ebe66ad56a","IPY_MODEL_981b0a264faa4011a4fad858334e7533","IPY_MODEL_4f75265e06bf45418e0ca1c9af4ba368"],"layout":"IPY_MODEL_61b3018395864251a3ac2d64e99af6b9"}},"4c87f36097994b588ad615ebe66ad56a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_7c887369e1844a4bb6ec5fe393b07e6b","placeholder":"​","style":"IPY_MODEL_40207d4cc0f04485b050c516f65f21af","value":"vocab.txt: 100%"}},"981b0a264faa4011a4fad858334e7533":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_a0687082a0b84871ac1c5a92c904205c","max":231508,"min":0,"orientation":"horizontal","style":"IPY_MODEL_0a08f532c0b843bb98f7071df09ba628","value":231508}},"4f75265e06bf45418e0ca1c9af4ba368":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_84f16a86819e4ebbb730bd5402d48bf9","placeholder":"​","style":"IPY_MODEL_56df50c5666b474aa628875560deab41","value":" 232k/232k [00:00&lt;00:00, 1.43MB/s]"}},"61b3018395864251a3ac2d64e99af6b9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7c887369e1844a4bb6ec5fe393b07e6b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"40207d4cc0f04485b050c516f65f21af":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a0687082a0b84871ac1c5a92c904205c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0a08f532c0b843bb98f7071df09ba628":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"84f16a86819e4ebbb730bd5402d48bf9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"56df50c5666b474aa628875560deab41":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"3aaf55ae67c840a0872c5e304d48d06e":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_a607b56184ef4cbabe9478ca7d9b9de5","IPY_MODEL_4643952542504201bc2cb76e60bf53d6","IPY_MODEL_48ad0b6b6a8e495c82d16e0737744b56"],"layout":"IPY_MODEL_071ae2fcf4094b168b73c97136e01af4"}},"a607b56184ef4cbabe9478ca7d9b9de5":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_5cf4282b5130401dbed6fbd3aff23000","placeholder":"​","style":"IPY_MODEL_063ef7bc17c341948063d0eaac872a36","value":"tokenizer.json: 100%"}},"4643952542504201bc2cb76e60bf53d6":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_b4c0cbc635c84a6fa72a9359a1a6d186","max":466062,"min":0,"orientation":"horizontal","style":"IPY_MODEL_14fae5cef38e4c69b471cecef4d9bdb7","value":466062}},"48ad0b6b6a8e495c82d16e0737744b56":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_5dd6d82521f6486b983c97a4fc3b5227","placeholder":"​","style":"IPY_MODEL_80501e0a5435458da2a552ac638329d8","value":" 466k/466k [00:00&lt;00:00, 2.89MB/s]"}},"071ae2fcf4094b168b73c97136e01af4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5cf4282b5130401dbed6fbd3aff23000":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"063ef7bc17c341948063d0eaac872a36":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"b4c0cbc635c84a6fa72a9359a1a6d186":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"14fae5cef38e4c69b471cecef4d9bdb7":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"5dd6d82521f6486b983c97a4fc3b5227":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"80501e0a5435458da2a552ac638329d8":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"3cc951284ccf47ad916f04dcfe410ce7":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_505bfaa693de4a68889e16aefa82de3f","IPY_MODEL_5ee4c53b4ecb465e80c85b4c3ac397d5","IPY_MODEL_2bba5f84989f4f33a0b1a09d6fcaa8f3"],"layout":"IPY_MODEL_e3fe926aa84e46fc860957c49e47cd08"}},"505bfaa693de4a68889e16aefa82de3f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_2b6cc865871741ec8aae701bb31570ba","placeholder":"​","style":"IPY_MODEL_f084acae4c3d4a778a8cc10e5080c6af","value":"Map: 100%"}},"5ee4c53b4ecb465e80c85b4c3ac397d5":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_4f0ecf2580984bee9731995a918b3e53","max":696,"min":0,"orientation":"horizontal","style":"IPY_MODEL_28b302d060104edc9e987bf87608fc27","value":696}},"2bba5f84989f4f33a0b1a09d6fcaa8f3":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_7c5f375ff5eb417381ef0d16a41ecb3e","placeholder":"​","style":"IPY_MODEL_aed3c1282d1d4172848b66f57f4a2f13","value":" 696/696 [00:00&lt;00:00, 1852.42 examples/s]"}},"e3fe926aa84e46fc860957c49e47cd08":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2b6cc865871741ec8aae701bb31570ba":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f084acae4c3d4a778a8cc10e5080c6af":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"4f0ecf2580984bee9731995a918b3e53":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"28b302d060104edc9e987bf87608fc27":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"7c5f375ff5eb417381ef0d16a41ecb3e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"aed3c1282d1d4172848b66f57f4a2f13":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"2138ef42b8b2444aaa272dbcee5057b5":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_ee3a2fc993894d218935ae120822fd88","IPY_MODEL_38cd4a8aa0d2481caa1560c78a3b879b","IPY_MODEL_756de94653584879b1188b69d2c3d443"],"layout":"IPY_MODEL_40274e566eb54f57a014c82a5e44a173"}},"ee3a2fc993894d218935ae120822fd88":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_817aad91716947c996d287576065d614","placeholder":"​","style":"IPY_MODEL_d3d8196da40f43b5a55119ded31d5409","value":"Map: 100%"}},"38cd4a8aa0d2481caa1560c78a3b879b":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_eb1b51c0ac5d48009b8858662ef76ba8","max":199,"min":0,"orientation":"horizontal","style":"IPY_MODEL_ab5023ad44824b2aaa2b040abb2fed11","value":199}},"756de94653584879b1188b69d2c3d443":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_3cfc1ff9c5354c31bc1dced6379ea07a","placeholder":"​","style":"IPY_MODEL_ffbfa6e40a6b4b8ca1fd056d0bc2aae1","value":" 199/199 [00:00&lt;00:00, 1540.84 examples/s]"}},"40274e566eb54f57a014c82a5e44a173":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"817aad91716947c996d287576065d614":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d3d8196da40f43b5a55119ded31d5409":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"eb1b51c0ac5d48009b8858662ef76ba8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ab5023ad44824b2aaa2b040abb2fed11":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"3cfc1ff9c5354c31bc1dced6379ea07a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ffbfa6e40a6b4b8ca1fd056d0bc2aae1":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"eeaf37a705c845f19889f1d374e33dde":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_b326f2357cfb4de287580702637858d4","IPY_MODEL_4b6a3054e9334ea29e580a29f87c48e7","IPY_MODEL_e2cc0f5cceba4b55a80a53811e6c06eb"],"layout":"IPY_MODEL_157499ce0fa744ffa4f0f09a10ab2946"}},"b326f2357cfb4de287580702637858d4":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ee81f5534d7f42308fb1a7214d338c72","placeholder":"​","style":"IPY_MODEL_ff1a52d718ca4c7fa9af8f7744d95f51","value":"Map: 100%"}},"4b6a3054e9334ea29e580a29f87c48e7":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_81b3e2bef61d419188d952221743dc5e","max":100,"min":0,"orientation":"horizontal","style":"IPY_MODEL_118caec38491442e9ffa0203d6f7b880","value":100}},"e2cc0f5cceba4b55a80a53811e6c06eb":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_09f62eb10ffe4bc3a9293cbc4d4bfb1b","placeholder":"​","style":"IPY_MODEL_84843e32d4e444e58f4d5241962edc9b","value":" 100/100 [00:00&lt;00:00, 1330.87 examples/s]"}},"157499ce0fa744ffa4f0f09a10ab2946":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ee81f5534d7f42308fb1a7214d338c72":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ff1a52d718ca4c7fa9af8f7744d95f51":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"81b3e2bef61d419188d952221743dc5e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"118caec38491442e9ffa0203d6f7b880":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"09f62eb10ffe4bc3a9293cbc4d4bfb1b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"84843e32d4e444e58f4d5241962edc9b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"markdown","source":["# 1.1) DATA CLEANING"],"metadata":{"id":"78peZLj6L2Ta"}},{"cell_type":"markdown","source":["SETTING DIRECTORY AND IMPORTING LIBRARIES"],"metadata":{"id":"m_Ap-iWsG44S"}},{"cell_type":"code","source":["!pip install tabulate\n","!pip install pyLDAvis"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qRvvZN-QM0n-","executionInfo":{"status":"ok","timestamp":1739788067267,"user_tz":-60,"elapsed":7522,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"b936af72-7a0c-427f-f82d-829db3e73b12"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: tabulate in /usr/local/lib/python3.11/dist-packages (0.9.0)\n","Collecting pyLDAvis\n","  Downloading pyLDAvis-3.4.1-py3-none-any.whl.metadata (4.2 kB)\n","Requirement already satisfied: numpy>=1.24.2 in /usr/local/lib/python3.11/dist-packages (from pyLDAvis) (1.26.4)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from pyLDAvis) (1.13.1)\n","Requirement already satisfied: pandas>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from pyLDAvis) (2.2.2)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from pyLDAvis) (1.4.2)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from pyLDAvis) (3.1.5)\n","Requirement already satisfied: numexpr in /usr/local/lib/python3.11/dist-packages (from pyLDAvis) (2.10.2)\n","Collecting funcy (from pyLDAvis)\n","  Downloading funcy-2.0-py2.py3-none-any.whl.metadata (5.9 kB)\n","Requirement already satisfied: scikit-learn>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from pyLDAvis) (1.6.1)\n","Requirement already satisfied: gensim in /usr/local/lib/python3.11/dist-packages (from pyLDAvis) (4.3.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from pyLDAvis) (75.1.0)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=2.0.0->pyLDAvis) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=2.0.0->pyLDAvis) (2025.1)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=2.0.0->pyLDAvis) (2025.1)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.0.0->pyLDAvis) (3.5.0)\n","Requirement already satisfied: smart-open>=1.8.1 in /usr/local/lib/python3.11/dist-packages (from gensim->pyLDAvis) (7.1.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->pyLDAvis) (3.0.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas>=2.0.0->pyLDAvis) (1.17.0)\n","Requirement already satisfied: wrapt in /usr/local/lib/python3.11/dist-packages (from smart-open>=1.8.1->gensim->pyLDAvis) (1.17.2)\n","Downloading pyLDAvis-3.4.1-py3-none-any.whl (2.6 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.6/2.6 MB\u001b[0m \u001b[31m72.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading funcy-2.0-py2.py3-none-any.whl (30 kB)\n","Installing collected packages: funcy, pyLDAvis\n","Successfully installed funcy-2.0 pyLDAvis-3.4.1\n"]}]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hQ1Lex4SGcMW","executionInfo":{"status":"ok","timestamp":1739788115052,"user_tz":-60,"elapsed":42670,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"c64eb702-70af-4a6e-dacd-23953adf7cdf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["import pandas as pd\n","import spacy\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","nlp = spacy.load('en_core_web_sm')\n","from spacy.tokens import Doc, Span\n","import numpy as np\n","import re\n","import os\n","from tabulate import tabulate\n","import pyLDAvis\n","import pyLDAvis.lda_model\n","from spacy.training import align\n","import matplotlib.pyplot as plt\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.decomposition import LatentDirichletAllocation\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","drive_path = '/content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2'\n","\n","import pandas as pd\n","import spacy\n","nlp = spacy.load('en_core_web_sm')\n","from spacy.tokens import Doc, Span\n","from spacy.matcher import DependencyMatcher\n","from spacy.matcher import Matcher\n","from sklearn.model_selection import train_test_split\n","import numpy as np\n","from sklearn.preprocessing import MultiLabelBinarizer\n","from sklearn.preprocessing import LabelEncoder\n","import urllib.request\n","import zipfile\n","import os\n","from collections import Counter\n","from sklearn.utils.class_weight import compute_class_weight\n","import tensorflow as tf\n","from spacy.training import align\n","from google.colab import drive\n","drive.mount('/content/drive')\n","import matplotlib.pyplot as plt\n","\n","drive_path = '/content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2'"]},{"cell_type":"markdown","source":["CREATING DATAFRAMES FOR FILE1 AND FILE2"],"metadata":{"id":"C6ESUynoXb6w"}},{"cell_type":"code","source":["file_path = os.path.join(drive_path, 'file1.ann')\n","file_path2 = os.path.join(drive_path, 'file2.ann')\n","\n","def create_dataframe(content):\n","    with open(content, 'r', encoding='utf-8') as file:\n","        lines = file.readlines()\n","    data = [line.split() for line in lines]\n","    df = pd.DataFrame(data, columns=['token', 'tag'])\n","    df = df.drop(index=df.index[0])\n","    return df\n","\n","df_file1 = create_dataframe(file_path)\n","df_file2 = create_dataframe(file_path2)"],"metadata":{"id":"vIlbGMp-XTTY","executionInfo":{"status":"ok","timestamp":1739788133924,"user_tz":-60,"elapsed":4204,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"fadb345b-d331-4741-e633-341179084890"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["CLEANING FUNCTIONS FOR DATAFRAMES, ARAB CHARACTERS AND SPLITTING"],"metadata":{"id":"TVmbLgRcYNV2"}},{"cell_type":"code","source":["def pulisci_df(df):\n","    def is_arabic(word):\n","        if word is None or pd.isnull(word):\n","            return True\n","        word = str(word)\n","        return any('\\u0600' <= char <= '\\u06FF' for char in word)\n","\n","    mask = df['token'].apply(is_arabic)\n","    return df[~mask]\n","\n","df_file1 = pulisci_df(df_file1)\n","df_file1 = df_file1.reset_index(drop=True)\n","\n","df_file2 = pulisci_df(df_file2)\n","df_file2 = df_file2.reset_index(drop= True)\n","\n","def pulisci_file(df, column_name):\n","    result = df[column_name].str.cat(sep=' ')\n","    return result\n","\n","file1_text = pulisci_file(df_file1, 'token')\n","file2_text = pulisci_file(df_file2, 'token')\n"],"metadata":{"id":"beaXwt1LXlhZ","executionInfo":{"status":"ok","timestamp":1739788142688,"user_tz":-60,"elapsed":500,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"a565c0cd-14da-46ee-99bd-a06e54e12f5d"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["SETTING UP SPACY AND TOKENIZATION"],"metadata":{"id":"8sj2jLuQYYuI"}},{"cell_type":"code","source":["doc1 = nlp(file1_text)\n","doc2 = nlp(file2_text)"],"metadata":{"id":"hQrs2HMrYcsn","executionInfo":{"status":"ok","timestamp":1739788151026,"user_tz":-60,"elapsed":4279,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"265c4fd1-e47f-4056-fd58-88dc9e2e722c"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["CHANGE SPACY'S TAGGING SYSTEM TO IOB2 (ORIGINAL FORMAT OF THE DATASET) FOR FILE1 AND FILE 2"],"metadata":{"id":"GyRemfv7Yp0n"}},{"cell_type":"code","source":["original_tokens = df_file1[\"token\"].tolist()\n","spacy_tokens = [token.text for token in doc1]\n","\n","alignments = align.get_alignments(original_tokens, spacy_tokens)\n","\n","aligned_iob2 = [\"O\"] * len(spacy_tokens)\n","\n","for original_idx, spacy_indices in enumerate(alignments[0]):\n","    tag = df_file1[\"tag\"][original_idx]\n","    if len(spacy_indices) == 1:\n","        aligned_iob2[spacy_indices[0]] = tag\n","    else:\n","        for idx in spacy_indices:\n","            aligned_iob2[idx] = tag\n","\n","df_test1 = pd.DataFrame({'tokens': spacy_tokens, 'tag': aligned_iob2})"],"metadata":{"id":"s1j3h_ewYtCP","executionInfo":{"status":"ok","timestamp":1739788155324,"user_tz":-60,"elapsed":651,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"e0820684-abe5-45f6-e6c6-a5fb440b5058"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["original_tokens = df_file2[\"token\"].tolist()\n","spacy_tokens = [token.text for token in doc2]\n","\n","alignments = align.get_alignments(original_tokens, spacy_tokens)\n","\n","aligned_iob2 = [\"O\"] * len(spacy_tokens)\n","\n","for original_idx, spacy_indices in enumerate(alignments[0]):\n","    tag = df_file1[\"tag\"][original_idx]\n","    if len(spacy_indices) == 1:\n","        aligned_iob2[spacy_indices[0]] = tag\n","    else:\n","        for idx in spacy_indices:\n","            aligned_iob2[idx] = tag\n","\n","df_test2 = pd.DataFrame({'tokens': spacy_tokens, 'tag': aligned_iob2})"],"metadata":{"id":"C-5IvUebY1qo","executionInfo":{"status":"ok","timestamp":1739788160653,"user_tz":-60,"elapsed":1232,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"c4a31044-10c8-49da-82f0-19353f8ef000"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["REPLACE DOC1 TAGS WITH THE ORIGINAL IOB2 TAGS"],"metadata":{"id":"j6h3F_cKZlm0"}},{"cell_type":"code","source":["def extract_entities(df, tag_column=\"tag\"):\n","    entities = []\n","    current_entity = None\n","\n","    for index, row in df.iterrows():\n","        tag = row[tag_column]\n","\n","        if tag.startswith(\"B-\"):  # Begin a new entity\n","            if current_entity:  # Save the previous entity\n","                entities.append(current_entity)\n","            entity_type = tag[2:]  # Extract the entity type\n","            current_entity = {\"type\": entity_type, \"start\": index, \"end\": index + 1}\n","\n","        elif tag.startswith(\"I-\") and current_entity:  # Inside an entity\n","            entity_type = tag[2:]\n","            if current_entity[\"type\"] == entity_type:  # Ensure it's the same entity type\n","                current_entity[\"end\"] = index + 1  # Extend the current entity\n","\n","        else:  # Outside any entity\n","            if current_entity:  # Save the current entity\n","                entities.append(current_entity)\n","                current_entity = None\n","\n","    # Add the last entity if it exists\n","    if current_entity:\n","        entities.append(current_entity)\n","\n","    return entities"],"metadata":{"id":"i4GDIzAJZrST","executionInfo":{"status":"ok","timestamp":1739788165209,"user_tz":-60,"elapsed":602,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"b1be802c-9697-45b4-f67c-52c08a8e059b"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["EXTRACTING ENTITIES FOR FILE1 AND FILE2 WITH FUNCTION ABOVE"],"metadata":{"id":"TzU4EfAaaoBK"}},{"cell_type":"code","source":["custom_entities1 = extract_entities(df_test1)\n","\n","doc1.ents = [Span(doc1, entity[\"start\"], entity[\"end\"], label=entity[\"type\"]) for entity in custom_entities1]\n","doc1.set_ents(doc1.ents, default=\"outside\")"],"metadata":{"id":"oqlMI7Z3auix","executionInfo":{"status":"ok","timestamp":1739788171043,"user_tz":-60,"elapsed":824,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"31b45118-f726-4b1d-d771-41c492f88ca5"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["custom_entities2 = extract_entities(df_test2)\n","\n","doc2.ents = [Span(doc2, entity[\"start\"], entity[\"end\"], label=entity[\"type\"]) for entity in custom_entities2]\n","doc2.set_ents(doc2.ents, default=\"outside\")"],"metadata":{"id":"UqQlKs6Ka4Cf","executionInfo":{"status":"ok","timestamp":1739788176589,"user_tz":-60,"elapsed":1062,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"18db16cd-1c99-4234-a1a0-3f27eb73244d"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["CREATING DFs WITH GRAMMATICAL INFO AND TAGS"],"metadata":{"id":"bGRjxghybKyn"}},{"cell_type":"code","source":["data1 = []\n","for token in doc1:\n","    data1.append([\n","        getattr(token, \"text\"),      # Token text\n","        getattr(token, \"lemma_\", None),   # Lemma\n","        getattr(token, \"pos_\", None),     # Part-of-speech tag\n","        getattr(token, \"dep_\", None),     # Dependency label\n","        getattr(token.head, \"text\", None),# Head text\n","        f\"{token.ent_iob_}-{token.ent_type_}\" if token.ent_type_ else \"O\"\n","    ])"],"metadata":{"id":"I2J0pwIjbZ3M","executionInfo":{"status":"ok","timestamp":1739788179241,"user_tz":-60,"elapsed":11,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"54a080ea-488e-4c65-8bb2-bd307b420818"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["data2 = []\n","for token in doc2:\n","    data2.append([\n","        getattr(token, \"text\"),      # Token text\n","        getattr(token, \"lemma_\", None),   # Lemma\n","        getattr(token, \"pos_\", None),     # Part-of-speech tag\n","        getattr(token, \"dep_\", None),     # Dependency label\n","        getattr(token.head, \"text\", None),# Head text\n","        f\"{token.ent_iob_}-{token.ent_type_}\" if token.ent_type_ else \"O\"\n","    ])"],"metadata":{"id":"mMNoncXwbhTz","executionInfo":{"status":"ok","timestamp":1739788183795,"user_tz":-60,"elapsed":970,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"4a284a04-d490-487f-8299-35a82b1f2b2f"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["def join_and_clear(df, col_name, row1, row2):\n","    df.at[row1, col_name] = f\"{df.at[row1, col_name]} {df.at[row2, col_name]}\"\n","    df.loc[row2] = [None] * len(df.columns)"],"metadata":{"id":"BwGrYBVybs5g","executionInfo":{"status":"ok","timestamp":1739788185680,"user_tz":-60,"elapsed":11,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"3aebef24-d3f9-4ab7-d0a1-b61acc6eb6d0"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["df1 = pd.DataFrame(data1, columns=[\"token\", \"Lemma\", \"POS\", \"DEP\", \"Head\", \"tag\"])\n","print(df1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JchsaOsYbw1n","executionInfo":{"status":"ok","timestamp":1739788187564,"user_tz":-60,"elapsed":11,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"35eaedf5-4116-4933-8a62-5906d59cbad3"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["           token      Lemma    POS       DEP     Head tag\n","0      Operation  Operation  PROPN  compound  Curtain   O\n","1          Steel      Steel  PROPN  compound  Curtain   O\n","2        Curtain    Curtain  PROPN     nsubj      was   O\n","3              (          (  PUNCT     punct   Arabic   O\n","4         Arabic     arabic    ADJ     appos  Curtain   O\n","...          ...        ...    ...       ...      ...  ..\n","19925        act        act   NOUN      pobj       of   O\n","19926         of         of    ADP      prep      act   O\n","19927       mass       mass    ADJ      amod   murder   O\n","19928     murder     murder   NOUN      pobj       of   O\n","19929          .          .  PUNCT     punct     said   O\n","\n","[19930 rows x 6 columns]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["df2 = pd.DataFrame(data2, columns=[\"token\", \"Lemma\", \"POS\", \"DEP\", \"Head\", \"tag\"])\n","print(df2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pGdrmZHYb8a6","executionInfo":{"status":"ok","timestamp":1739788191384,"user_tz":-60,"elapsed":12,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"9f610d30-c4ac-4876-9754-fcddd17abda0"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["        token   Lemma    POS     DEP      Head             tag\n","0      Carter  Carter  PROPN   nsubj   thanked               O\n","1     thanked   thank   VERB    ROOT   thanked               O\n","2       Abadi   Abadi  PROPN    dobj   thanked               O\n","3         for     for    ADP    prep   thanked               O\n","4      nearly  nearly    ADV  advmod       two               O\n","...       ...     ...    ...     ...       ...             ...\n","5249     time    time   NOUN    pobj        at               O\n","5250       of      of    ADP    prep      time               O\n","5251      the     the    DET     det    attack               O\n","5252   attack  attack   NOUN    pobj        of               O\n","5253        .       .  PUNCT   punct  reported  B-Organisation\n","\n","[5254 rows x 6 columns]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["# 1.2) EXPLORATORY DATA ANALYSIS"],"metadata":{"id":"1cFn4aW3MH6t"}},{"cell_type":"markdown","source":["DISPLAYING PLOTS OF POS, DEPPARSE, LEMMAS"],"metadata":{"id":"D6y1hIHFHDjn"}},{"cell_type":"markdown","source":["The frequency of Part-of-Speech (POS) tags are displayed and compared using bar charts for each document of the corpus. The distribution is quite similar, although the number of tokens differs, as the second document is shorter. The plots show that the top three most frequent POS tags are nouns, pronouns and punctuation in both documents."],"metadata":{"id":"CjXWcIPaYxbc"}},{"cell_type":"code","source":["import os\n","import matplotlib.pyplot as plt\n","\n","# Creare la cartella di salvataggio se non esiste\n","save_dir = '/content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2/plots'\n","os.makedirs(save_dir, exist_ok=True)\n","\n","# Calcolare le distribuzioni POS\n","pos_counts_1 = df1['POS'].value_counts()\n","pos_counts_2 = df2['POS'].value_counts()\n","\n","# Creare la figura con sfondo personalizzato\n","fig, axes = plt.subplots(1, 2, figsize=(12, 6), facecolor='#1E1E2F')\n","\n","# Primo grafico\n","axes[0].bar(pos_counts_1.index, pos_counts_1.values, color='skyblue')\n","axes[0].set_title('Distribution of POS tags (doc1)', fontsize=14, color='white')\n","axes[0].set_xlabel('POS Tag', fontsize=12, color='white')\n","axes[0].set_ylabel('Frequency', fontsize=12, color='white')\n","axes[0].tick_params(axis='x', rotation=45, colors='white')\n","axes[0].tick_params(axis='y', colors='white')\n","axes[0].set_facecolor('#1E1E2F')\n","\n","# Secondo grafico\n","axes[1].bar(pos_counts_2.index, pos_counts_2.values, color='salmon')\n","axes[1].set_title('Distribution of POS tags (doc2)', fontsize=14, color='white')\n","axes[1].set_xlabel('POS Tag', fontsize=12, color='white')\n","axes[1].set_ylabel('Frequency', fontsize=12, color='white')\n","axes[1].tick_params(axis='x', rotation=45, colors='white')\n","axes[1].tick_params(axis='y', colors='white')\n","axes[1].set_facecolor('#1E1E2F')\n","\n","# Impostare sfondo generale\n","fig.patch.set_facecolor('#1E1E2F')\n","\n","plt.tight_layout()\n","\n","# Salvare il grafico con sfondo personalizzato\n","plot_path = os.path.join(save_dir, 'pos_distribution.png')\n","plt.savefig(plot_path, facecolor=fig.get_facecolor())\n","\n","print(f\"Grafico salvato in: {plot_path}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":681},"id":"SqZEsWg-HGr1","executionInfo":{"status":"ok","timestamp":1739788213668,"user_tz":-60,"elapsed":1446,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"f4202246-c9bf-44bf-b072-d5f9acd8d5c3"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["Grafico salvato in: /content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2/plots/pos_distribution.png\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["The distributions of dependencies of both documents is now displayed in the two plots below. The dependencies are found through Spacy.  \n","Displaying the distribution of dependency labels (e.g., nsubj for subjects, dobj for direct objects, advmod for adverbial modifiers) provides a deeper understanding of syntactic structures. It can be useful for several reasons:\n","\n","* Understanding Sentence Structure: it helps analyze how different syntactic components (subjects, objects, modifiers, etc.) are distributed, providing insight into the document's linguistic complexity.\n","\n","* Comparing Text Datasets: dependency distributions can reveal stylistic differences.\n","\n","* Detecting Anomalies: unusual dependency distributions might indicate parsing errors, inconsistent formatting, or anomalies in the text."],"metadata":{"id":"uHxgZuGKZtnu"}},{"cell_type":"code","source":["dep_counts_1 = df1['DEP'].value_counts()\n","dep_counts_2 = df2['DEP'].value_counts()\n","\n","# Creare la figura con sfondo personalizzato\n","fig, axes = plt.subplots(1, 2, figsize=(12, 6), facecolor='#1E1E2F')\n","\n","# Primo grafico\n","axes[0].bar(dep_counts_1.index, dep_counts_1.values, color='skyblue')\n","axes[0].set_title('Distribution of dependencies (doc1)', fontsize=14, color='white')\n","axes[0].set_xlabel('Dependency', fontsize=12, color='white')\n","axes[0].set_ylabel('Frequency', fontsize=12, color='white')\n","axes[0].tick_params(axis='x', rotation=90, colors='white')\n","axes[0].tick_params(axis='y', colors='white')\n","axes[0].set_facecolor('#1E1E2F')\n","\n","# Secondo grafico\n","axes[1].bar(dep_counts_2.index, dep_counts_2.values, color='salmon')\n","axes[1].set_title('Distribution of dependencies (doc2)', fontsize=14, color='white')\n","axes[1].set_xlabel('Dependency', fontsize=12, color='white')\n","axes[1].set_ylabel('Frequency', fontsize=12, color='white')\n","axes[1].tick_params(axis='x', rotation=90, colors='white')\n","axes[1].tick_params(axis='y', colors='white')\n","axes[1].set_facecolor('#1E1E2F')\n","\n","# Impostare sfondo generale\n","fig.patch.set_facecolor('#1E1E2F')\n","\n","plt.tight_layout()\n","\n","# Salvare il grafico con sfondo personalizzato\n","plot_path = os.path.join(save_dir, 'dep_distribution.png')\n","plt.savefig(plot_path, facecolor=fig.get_facecolor())\n","\n","print(f\"Grafico salvato in: {plot_path}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":681},"id":"cNttpa7dHyiW","executionInfo":{"status":"ok","timestamp":1739788483525,"user_tz":-60,"elapsed":1857,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"7c3cce1e-5892-44cb-b6db-f7574023b87b"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["Grafico salvato in: /content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2/plots/dep_distribution.png\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["In both documents, the most frequent dependencies are:\n","* punctuation\n","* prepositions\n","* pobj (Object of a preposition)\n","* det (determiner)\n","* compound (Compound words)\n","* amod (Adjectival modifier)\n","* nsubj (Nominal subject)\n","* dobj (Direct object)\n","* conj (Conjunct)\n","\n","This result indicates that both documents share a similar syntactic structure, with the most frequent dependencies reflecting common sentence components.\n","\n","The high occurrence of punctuation suggests well-structured texts, while the frequent use of prepositions and their objects indicates a reliance on prepositional phrases, often found in descriptive or explanatory writing.  \n","\n","A high count of adjectival modifiers (amod) reinforces this descriptive quality.\n","The prevalence of nominal subjects and direct objects highlights a strong subject-verb-object (SVO) structure, typical of clear and direct writing.\n","Finally, common conjuncts (conj) suggest frequent use of coordinated phrases or lists, which can indicate either a complex sentence structure or an enumerative writing style."],"metadata":{"id":"xyAn-fXTc4Jm"}},{"cell_type":"markdown","source":["DISPLAYING AND PLOTTING ENTITIES (SPACY)"],"metadata":{"id":"NMsJI7ksORvm"}},{"cell_type":"markdown","source":["Displaying the distribution of the entities in the two documents provides insights into the prevalence and patterns of key entities such as persons, locations, and organizations. This analysis may help to refine NER models by identifying biases, improving accuracy, and detecting anomalies or errors in entity recognition. Additionally, it enhances text summarization by highlighting essential topics and themes.  \n","To improve readability, the 'O' tag has been excliuded, since it is disproportionally more frequent than all the other tags."],"metadata":{"id":"8JYDPIozKkbL"}},{"cell_type":"code","source":["import os\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","\n","def get_entity_labels(doc):\n","    return [ent.label_ for ent in doc.ents]\n","\n","labels_doc1 = get_entity_labels(doc1)\n","labels_doc2 = get_entity_labels(doc2)\n","\n","entity_counts_doc1 = pd.Series(labels_doc1).value_counts()\n","entity_counts_doc2 = pd.Series(labels_doc2).value_counts()\n","\n","all_labels = sorted(set(entity_counts_doc1.index).union(set(entity_counts_doc2.index)))\n","\n","entity_df = pd.DataFrame(index=all_labels)\n","entity_df['doc1'] = entity_counts_doc1\n","entity_df['doc2'] = entity_counts_doc2\n","entity_df = entity_df.fillna(0)\n","\n","# Ordinare il DataFrame per la somma delle occorrenze\n","entity_df = entity_df.sort_values(by=['doc1', 'doc2'], ascending=False)\n","\n","# Creare la cartella di salvataggio se non esiste\n","save_dir = '/content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2/plots'\n","os.makedirs(save_dir, exist_ok=True)\n","\n","# Creare la figura con sfondo personalizzato\n","fig, ax = plt.subplots(figsize=(14, 6), facecolor='#1E1E2F')\n","entity_df.plot(kind='bar', ax=ax, color=['skyblue', 'salmon'], width=0.8)\n","\n","ax.set_title('Distribution of recognized (Spacy) entities in the two documents', fontsize=14, color='white')\n","ax.set_xlabel('Entity', fontsize=12, color='white')\n","ax.set_ylabel('Frequency', fontsize=12, color='white')\n","ax.tick_params(axis='x', rotation=90, colors='white')\n","ax.tick_params(axis='y', colors='white')\n","ax.legend([\"doc1\", \"doc2\"], facecolor='#1E1E2F', edgecolor='white')\n","ax.grid(axis=\"y\", linestyle=\"--\", alpha=0.7, color='white')\n","ax.set_facecolor('#1E1E2F')\n","\n","# Impostare sfondo generale\n","fig.patch.set_facecolor('#1E1E2F')\n","\n","plt.tight_layout()\n","\n","# Salvare il grafico con sfondo personalizzato\n","plot_path = os.path.join(save_dir, 'entity_distribution.png')\n","plt.savefig(plot_path, facecolor=fig.get_facecolor())\n","\n","print(f\"Grafico salvato in: {plot_path}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":643},"id":"J27PKlKbOtJQ","executionInfo":{"status":"ok","timestamp":1739788574276,"user_tz":-60,"elapsed":911,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"62cbb1e7-3808-4d39-b95f-db8494942a83"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["Grafico salvato in: /content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2/plots/entity_distribution.png\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Once again, the two documents display a similaraty in their content. The most frequent tags contain information about locations, organizations and people. Additionally, since the two texts are related to defence topics, tags associated with weapons and military platforms are also present."],"metadata":{"id":"ZL9Vpid5Lsdh"}},{"cell_type":"markdown","source":["DISPLAYING IOB TAGS FREQUENCIES FOR THE TWO DATAFRAMES"],"metadata":{"id":"-bO4ldbdTIvm"}},{"cell_type":"markdown","source":["As previously mentioned, the most frequent tag, 'O,' was initially excluded from the plot. However, the following visualization now includes its frequency alongside the other IOB tags.  \n","\n","A clear class imbalance is evident, which could pose challenges during training. To address this, weighted adjustments were applied during the training phase to enhance the model's sensitivity and specificity in classification."],"metadata":{"id":"XyvbfJxFN4T_"}},{"cell_type":"code","source":["iob_counts_df1 = df1['tag'].value_counts()\n","iob_counts_df2 = df2['tag'].value_counts()\n","\n","all_tags = sorted(set(iob_counts_df1.index).union(set(iob_counts_df2.index)))\n","\n","iob_df = pd.DataFrame(index=all_tags)\n","iob_df['df1'] = iob_counts_df1\n","iob_df['df2'] = iob_counts_df2\n","iob_df = iob_df.fillna(0)\n","\n","# Ordinare il DataFrame per la somma delle occorrenze\n","iob_df = iob_df.sort_values(by=['df1', 'df2'], ascending=False)\n","\n","# Creare la cartella di salvataggio se non esiste\n","save_dir = '/content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2/plots'\n","os.makedirs(save_dir, exist_ok=True)\n","\n","# Creare la figura con sfondo personalizzato\n","fig, ax = plt.subplots(figsize=(12, 6), facecolor='#1E1E2F')\n","iob_df.plot(kind='bar', ax=ax, color=['skyblue', 'salmon'], width=0.8)\n","\n","ax.set_title('Distribution of IOB tags in the two documents', fontsize=14, color='white')\n","ax.set_xlabel('IOB Tag', fontsize=12, color='white')\n","ax.set_ylabel('Frequency', fontsize=12, color='white')\n","ax.tick_params(axis='x', rotation=45, colors='white')\n","ax.tick_params(axis='y', colors='white')\n","ax.legend([\"df1\", \"df2\"], facecolor='#1E1E2F', edgecolor='white')\n","ax.grid(axis=\"y\", linestyle=\"--\", alpha=0.7, color='white')\n","ax.set_facecolor('#1E1E2F')\n","\n","# Impostare sfondo generale\n","fig.patch.set_facecolor('#1E1E2F')\n","\n","plt.tight_layout()\n","\n","# Salvare il grafico con sfondo personalizzato\n","plot_path = os.path.join(save_dir, 'iob_distribution.png')\n","plt.savefig(plot_path, facecolor=fig.get_facecolor())\n","\n","print(f\"Grafico salvato in: {plot_path}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":681},"id":"nJnoPl8YSE-x","executionInfo":{"status":"ok","timestamp":1739788671782,"user_tz":-60,"elapsed":1011,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"a9ea068e-e8ca-49f7-8ec0-5f18fd30ebbc"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["Grafico salvato in: /content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2/plots/iob_distribution.png\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["IMPROVING THE READABILITY OF THE PLOT ESCLUDING O"],"metadata":{"id":"V-YnGwjrTdm2"}},{"cell_type":"code","source":["filtered_df1 = df1[df1['tag'] != 'O']\n","filtered_df2 = df2[df2['tag'] != 'O']\n","\n","iob_counts_df1 = filtered_df1['tag'].value_counts()\n","iob_counts_df2 = filtered_df2['tag'].value_counts()\n","\n","all_tags = sorted(set(iob_counts_df1.index).union(set(iob_counts_df2.index)))\n","\n","iob_df_filtered = pd.DataFrame(index=all_tags)\n","iob_df_filtered['df1'] = iob_counts_df1\n","iob_df_filtered['df2'] = iob_counts_df2\n","iob_df_filtered = iob_df_filtered.fillna(0)\n","\n","# Ordinare il DataFrame per la somma delle occorrenze\n","iob_df_filtered = iob_df_filtered.sort_values(by=['df1', 'df2'], ascending=False)\n","\n","# Creare la cartella di salvataggio se non esiste\n","save_dir = '/content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2/plots'\n","os.makedirs(save_dir, exist_ok=True)\n","\n","# Creare la figura con sfondo personalizzato\n","fig, ax = plt.subplots(figsize=(12, 6), facecolor='#1E1E2F')\n","iob_df_filtered.plot(kind='bar', ax=ax, color=['skyblue', 'salmon'], width=0.8)\n","\n","ax.set_title('Distribution of IOB tags in the two documents without O', fontsize=14, color='white')\n","ax.set_xlabel('IOB Tag', fontsize=12, color='white')\n","ax.set_ylabel('Frequency', fontsize=12, color='white')\n","ax.tick_params(axis='x', rotation=90, colors='white')\n","ax.tick_params(axis='y', colors='white')\n","ax.legend([\"df1\", \"df2\"], facecolor='#1E1E2F', edgecolor='white')\n","ax.grid(axis=\"y\", linestyle=\"--\", alpha=0.7, color='white')\n","ax.set_facecolor('#1E1E2F')\n","\n","# Impostare sfondo generale\n","fig.patch.set_facecolor('#1E1E2F')\n","\n","plt.tight_layout()\n","\n","# Salvare il grafico con sfondo personalizzato\n","plot_path = os.path.join(save_dir, 'iob_distribution_no_O.png')\n","plt.savefig(plot_path, facecolor=fig.get_facecolor())\n","\n","print(f\"Grafico salvato in: {plot_path}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":681},"id":"cGZ1od2USdhN","executionInfo":{"status":"ok","timestamp":1739788745028,"user_tz":-60,"elapsed":1132,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"cf8f8d8d-be78-4375-e0df-31242a838bdb"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["Grafico salvato in: /content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2/plots/iob_distribution_no_O.png\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["BAG OF WORDS AND TERM FREQUENCY ANALYSIS"],"metadata":{"id":"AMW3nLgMVKYm"}},{"cell_type":"markdown","source":["TF-IDF (Term Frequency-Inverse Document Frequency) is a statistical measure used to evaluate the importance of a word in a document.  It is calculated by multiplying the Term Frequency, which measures how often a word appears in a document, and the Inverse Document Frequency, which reduces the weight of common words across the document (e.g., \"the,\" \"and\") while emphasizing rare but important terms.  \n","It can be observed that the greatest part of the top 10 most important words in the two documents are the same, however there some dissimilarities. In the first file, we have the words \"Iraqi\", \"al\" and \"support\", while among the most important words of the second text, we can see \"strike\", \"security\" and \"operation\".  \n","We may speculate that the first document discusses Iraq and military or hunimanitarian aid more often, while the second might be more related to military operations and attacks.  \n","As for the words they share, we notice that both documents address topics related to Syria, Iraq and the terrorist organization of the Islamic State of Iraq and the Levant (ISIL), also known as ISIS."],"metadata":{"id":"zmBlnLzhPt4_"}},{"cell_type":"code","source":["\n","tf_idf_vec1 = TfidfVectorizer(use_idf=True, ngram_range=(1, 1), stop_words='english')\n","\n","tf_idf_data1 = tf_idf_vec1.fit_transform([file1_text])\n","\n","tf_idf_dataframe1 = pd.DataFrame(tf_idf_data1.toarray(), columns=tf_idf_vec1.get_feature_names_out())\n","\n","tf_idf_values = tf_idf_dataframe1.iloc[0]\n","\n","top_n = 10\n","top_terms = tf_idf_values.sort_values(ascending=False).head(top_n)\n","\n","fig, ax = plt.subplots(figsize=(10, 5), facecolor='#1E1E2F')\n","ax.barh(top_terms.index, top_terms.values, color='salmon')\n","\n","ax.set_xlabel(\"TF-IDF Score\", fontsize=12, color='white')\n","ax.set_ylabel(\"Terms\", fontsize=12, color='white')\n","ax.set_title(f\"Top {top_n} Terms with Highest TF-IDF Scores in file1_text\", fontsize=14, color='white')\n","ax.invert_yaxis()\n","ax.tick_params(axis='x', colors='white')\n","ax.tick_params(axis='y', colors='white')\n","ax.set_facecolor('#1E1E2F')\n","\n","# Impostare sfondo generale\n","fig.patch.set_facecolor('#1E1E2F')\n","\n","plt.tight_layout()\n","\n","# Salvare il grafico con sfondo personalizzato\n","tfidf_plot_path = os.path.join(save_dir, 'tfidf_top_terms.png')\n","plt.savefig(tfidf_plot_path, facecolor=fig.get_facecolor())\n","\n","print(f\"Grafico salvato in: {tfidf_plot_path}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":581},"id":"fv2TqVYDXGO-","executionInfo":{"status":"ok","timestamp":1739788986960,"user_tz":-60,"elapsed":593,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"a3ff827e-9d53-48fd-bd4f-483fd4269be1"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["Grafico salvato in: /content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2/plots/tfidf_top_terms.png\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["tf_idf_vec2 = TfidfVectorizer(use_idf=True, ngram_range=(1, 1), stop_words='english')\n","\n","tf_idf_data2 = tf_idf_vec2.fit_transform([file2_text])\n","\n","tf_idf_dataframe2 = pd.DataFrame(tf_idf_data2.toarray(), columns=tf_idf_vec2.get_feature_names_out())\n","\n","tf_idf_values2 = tf_idf_dataframe2.iloc[0]\n","\n","top_n = 10\n","top_terms2 = tf_idf_values2.sort_values(ascending=False).head(top_n)\n","\n","fig, ax = plt.subplots(figsize=(10, 5), facecolor='#1E1E2F')\n","ax.barh(top_terms2.index, top_terms2.values, color='skyblue')\n","\n","ax.set_xlabel(\"TF-IDF Score\", fontsize=12, color='white')\n","ax.set_ylabel(\"Terms\", fontsize=12, color='white')\n","ax.set_title(f\"Top {top_n} Terms with Highest TF-IDF Scores in file2_text\", fontsize=14, color='white')\n","ax.invert_yaxis()\n","ax.tick_params(axis='x', colors='white')\n","ax.tick_params(axis='y', colors='white')\n","ax.set_facecolor('#1E1E2F')\n","\n","# Impostare sfondo generale\n","fig.patch.set_facecolor('#1E1E2F')\n","\n","plt.tight_layout()\n","\n","# Salvare il grafico con sfondo personalizzato\n","tfidf_plot_path2 = os.path.join(save_dir, 'tfidf_top_terms_file2.png')\n","plt.savefig(tfidf_plot_path2, facecolor=fig.get_facecolor())\n","\n","print(f\"Grafico salvato in: {tfidf_plot_path2}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":581},"id":"gyJvGHVGYBQS","executionInfo":{"status":"ok","timestamp":1739789125674,"user_tz":-60,"elapsed":677,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"98e5d39f-2473-4b76-9cb3-e59faa8a2f6f"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["Grafico salvato in: /content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2/plots/tfidf_top_terms_file2.png\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["LATENT DIRICHLET ALLOCATION (LDA)"],"metadata":{"id":"0bZmE2dZJrO6"}},{"cell_type":"markdown","source":["Finally, LDA is performed on both documents to identify the hidden topics within. LDA assumes that each document is a mixture of multiple topics, and each topic is a distribution of words. It works by analyzing word co-occurrence patterns and assigning probabilities to words belonging to different topics."],"metadata":{"id":"pVsZos9HJwRi"}},{"cell_type":"markdown","source":["First, CountVectorizer is used to convert text into a sparse matrix (document-term matrix) where rows represent documents and columns represent words. Both extremely rare and very common words are excluded from the analysis."],"metadata":{"id":"lmtYFzKAPLdT"}},{"cell_type":"code","source":["## LDA FOR FILE 1\n","\n","cv = CountVectorizer(max_df=0.95, min_df=0.0001, stop_words='english')\n","\n","dtm = cv.fit_transform(df1['token'])\n","\n","dtm"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1PEn2kphMlq-","executionInfo":{"status":"ok","timestamp":1738952482270,"user_tz":-60,"elapsed":138,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"9c17d373-2045-48d9-e5a0-54bc5f8752a1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"execute_result","data":{"text/plain":["<19930x1415 sparse matrix of type '<class 'numpy.int64'>'\n","\twith 7752 stored elements in Compressed Sparse Row format>"]},"metadata":{},"execution_count":55}]},{"cell_type":"markdown","source":["The LDA model is initialized to find 3 topics in the first document, then it is trained using the document-term matrix that was previously defined.  \n","Finally, the top fifteen words for each of the four topics are printed below."],"metadata":{"id":"zsOfqNFdPtSX"}},{"cell_type":"code","source":["LDA = LatentDirichletAllocation(n_components=3, random_state=42)\n","LDA.fit(dtm)\n","\n","for index, topic in enumerate(LDA.components_):\n","    print(f'THE TOP 15 WORDS FOR TOPIC #{index}')\n","    print([cv.get_feature_names_out()[i] for i in topic.argsort()[-15:]])\n","    print('\\n')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ROgHD2sAY4B7","executionInfo":{"status":"ok","timestamp":1738952493629,"user_tz":-60,"elapsed":8001,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"86430d4c-7e71-48de-d27f-fb0e14760628"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["THE TOP 15 WORDS FOR TOPIC #0\n","['campaign', 'tobias', 'regime', 'ellwood', 'tactical', 'international', 'strikes', 'foreign', 'mosul', 'united', 'security', 'syrian', 'said', 'forces', 'iraq']\n","\n","\n","THE TOP 15 WORDS FOR TOPIC #1\n","['today', 'destroyed', 'states', 'work', 'near', 'city', 'killed', 'strike', 'operation', 'government', 'minister', 'al', 'support', 'iraqi', 'isil']\n","\n","\n","THE TOP 15 WORDS FOR TOPIC #2\n","['daesh', 'uk', 'continue', 'humanitarian', 'conducted', 'defeat', 'state', 'operations', 'military', 'attack', 'group', 'secretary', 'people', 'coalition', 'syria']\n","\n","\n"]}]},{"cell_type":"markdown","source":["* **Topic #0** seems to focus on military campaigns and foreign interventions, with words like campaign, regime, tactical, strikes, security, Syrian, forces, and Iraq. The presence of Tobias Ellwood (a British politician) and the word 'international' suggest a possible UK government or international policy perspective.\n","\n","* **Topic #1** appears to emphasize specific military actions and their consequences, with words such as destroyed, strike, operation, killed, government, minister, Iraqi, and ISIL. This suggests coverage of direct military engagements, casualties, and government responses.\n","\n","* **Topic #2** centers on broader strategic efforts and international involvement against Daesh (ISIS). Words like daesh, humanitarian, defeat, operations, coalition, military, secretary, and Syria indicate discussions on counter-terrorism, military strategy, and international coordination."],"metadata":{"id":"eBbHbtihXTSX"}},{"cell_type":"markdown","source":["Topic modeling visualization is made possible using the pyLDAvis library, which helps in understanding the similarity between topics, the proportion of each topic within the text, and the frequency with which each topic generates specific terms.  \n","The three topics found, represented by the bubbles, are far apart from each other, indicating that they are quite distinct. Additionally, the bubbles are large, suggesting that a significant percentage of sentences in the document contributes to each topic.  \n","On the right, the most common words in the text are displayed along with their overall frequency (in blue) and their estimated frequency within a selected topic (in red).\n","It can be observed that, for each topic, the frequency of words used in the context of that topic closely aligns with their overall frequency in the text."],"metadata":{"id":"2BhmlCXFUad4"}},{"cell_type":"code","source":["pyLDAvis.enable_notebook()\n","panel = pyLDAvis.lda_model.prepare(LDA, dtm, cv)\n","pyLDAvis.display(panel)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":917},"id":"1laFyZQcgt8F","executionInfo":{"status":"ok","timestamp":1738952501150,"user_tz":-60,"elapsed":2834,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"c59cad2d-996e-40fe-bcd3-2a6eb23aa89f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"execute_result","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.4.0/pyLDAvis/js/ldavis.v1.0.0.css\">\n","\n","\n","<div id=\"ldavis_el4171331903742717763286299554\" style=\"background-color:white;\"></div>\n","<script type=\"text/javascript\">\n","\n","var ldavis_el4171331903742717763286299554_data = {\"mdsDat\": {\"x\": [-0.26855792012286656, 0.18541993867415843, 0.08313798144870814], \"y\": [-0.05804639186384563, -0.19959217317805303, 0.25763856504189864], \"topics\": [1, 2, 3], \"cluster\": [1, 1, 1], \"Freq\": [33.778062387426985, 33.45511421485353, 32.76682339771948]}, \"tinfo\": {\"Term\": [\"isil\", \"iraq\", \"syria\", \"coalition\", \"iraqi\", \"forces\", \"said\", \"support\", \"al\", \"syrian\", \"security\", \"united\", \"people\", \"minister\", \"mosul\", \"government\", \"foreign\", \"strikes\", \"secretary\", \"group\", \"attack\", \"operation\", \"military\", \"strike\", \"international\", \"killed\", \"operations\", \"city\", \"near\", \"work\", \"isil\", \"iraqi\", \"support\", \"al\", \"minister\", \"government\", \"operation\", \"strike\", \"killed\", \"city\", \"near\", \"work\", \"states\", \"destroyed\", \"today\", \"civilians\", \"including\", \"attacks\", \"air\", \"terrorist\", \"held\", \"access\", \"aircraft\", \"turkey\", \"command\", \"raqqah\", \"weapons\", \"conflict\", \"control\", \"syrians\", \"iraq\", \"forces\", \"said\", \"syrian\", \"security\", \"united\", \"mosul\", \"foreign\", \"strikes\", \"international\", \"tactical\", \"ellwood\", \"regime\", \"tobias\", \"campaign\", \"assad\", \"east\", \"efforts\", \"000\", \"baghdad\", \"books\", \"time\", \"partners\", \"reports\", \"aid\", \"meeting\", \"war\", \"engaged\", \"nations\", \"community\", \"syria\", \"coalition\", \"people\", \"secretary\", \"group\", \"attack\", \"military\", \"operations\", \"state\", \"defeat\", \"conducted\", \"humanitarian\", \"continue\", \"uk\", \"daesh\", \"counter\", \"new\", \"members\", \"jordan\", \"council\", \"resolve\", \"political\", \"committed\", \"end\", \"says\", \"fighters\", \"important\", \"library\", \"france\", \"fight\"], \"Freq\": [108.0, 87.0, 85.0, 59.0, 56.0, 53.0, 53.0, 52.0, 46.0, 45.0, 38.0, 37.0, 35.0, 35.0, 34.0, 34.0, 33.0, 32.0, 29.0, 29.0, 26.0, 26.0, 25.0, 25.0, 25.0, 25.0, 23.0, 24.0, 23.0, 23.0, 108.37935010811303, 55.58443005010934, 52.23237124675019, 46.366268072168225, 34.63406011545545, 33.79604513006176, 26.25390893222552, 25.41589359232249, 24.577878195469673, 23.739862735577294, 22.901847205633306, 22.901847205632762, 22.06383159758011, 21.225815902014748, 20.387800108041613, 19.54978420284121, 18.711768171234937, 18.711768171224733, 17.873751995206284, 17.87375199520279, 17.03573565310078, 15.359702360115303, 15.359702360093845, 14.521685337685014, 14.52168533767107, 14.52168533766802, 13.683668002133341, 13.683668002087742, 12.845650290866223, 12.845650290811667, 87.15986449350896, 53.41908933539567, 52.57556988040864, 44.983894456181176, 38.23573783576678, 37.39221819302565, 34.018139433541485, 33.17461968920631, 31.4875801214088, 24.739420415045, 19.67829807878049, 17.99125644263362, 16.304214152436707, 15.460692694038631, 15.460692694027157, 14.617170977695507, 14.617170977680638, 14.61717097767245, 13.773648955136093, 13.773648955133012, 13.773648955128477, 13.773648955127731, 13.773648955126548, 12.930126565239217, 12.930126565230514, 12.086603729479448, 12.086603729466452, 12.08660372945935, 12.086603729444372, 12.086603729414374, 85.01291694250266, 59.33677112629541, 35.37236422508649, 29.38126067736947, 28.525388617351155, 25.95777218232695, 25.10189993769968, 23.3901552658465, 21.678410301880046, 19.110792134158718, 19.110792134156718, 19.110792134155997, 18.25491916418846, 18.25491916418585, 17.399046039635913, 16.543172736142836, 16.54317273614095, 15.68729922391529, 15.687299223900926, 15.687299223893694, 14.83142546622192, 14.831425466205577, 13.975551417084851, 13.97555141707874, 13.975551417069981, 13.119677018380921, 12.263802195321803, 12.26380219528865, 11.407926850333254, 11.407926850300809], \"Total\": [108.0, 87.0, 85.0, 59.0, 56.0, 53.0, 53.0, 52.0, 46.0, 45.0, 38.0, 37.0, 35.0, 35.0, 34.0, 34.0, 33.0, 32.0, 29.0, 29.0, 26.0, 26.0, 25.0, 25.0, 25.0, 25.0, 23.0, 24.0, 23.0, 23.0, 108.94972832378662, 56.15481404039935, 52.80275599611388, 46.93665442239973, 35.20445129762295, 34.36643679056069, 26.82430624573735, 25.98629174367119, 25.14827724240755, 24.310262742032236, 23.472248242644092, 23.472248242644106, 22.634233744356628, 21.796219247302375, 20.958204751634828, 20.120190257534716, 19.282175765215907, 19.282175765216003, 18.44416127493226, 18.444161274932302, 17.60614678698895, 15.930117819681247, 15.93011781968157, 15.092103341325181, 15.092103341325378, 15.092103341325409, 14.254088867381645, 14.254088867382327, 13.416074398732812, 13.416074398733686, 87.72830227104461, 53.98753177211559, 53.14401250997808, 45.55233915215405, 38.80418505932152, 37.96066579800148, 34.5865887535527, 33.743069492678934, 32.056030971276925, 25.30787689195429, 20.246761343654256, 18.559722831308093, 16.87268432182572, 16.029165068456408, 16.029165068456432, 15.185645816216523, 15.185645816216628, 15.185645816216697, 14.342126565317548, 14.342126565317873, 14.342126565317693, 14.342126565317784, 14.342126565317773, 13.498607316027458, 13.498607316027346, 12.6550880686897, 12.655088068690098, 12.655088068690109, 12.655088068690116, 12.655088068690183, 85.57700831665314, 59.90086559371702, 35.93646564604851, 29.94536562702334, 29.08949419353839, 26.521879888591517, 25.666008451854147, 23.954265575162403, 22.24252269332422, 19.674908357850857, 19.67490835785083, 19.674908357850814, 18.81903690833448, 18.81903690833443, 17.96316545609468, 17.107294000702314, 17.107294000702293, 16.25142254163249, 16.251422541632266, 16.251422541632124, 15.395551078238132, 15.395551078237848, 14.539679609709127, 14.539679609709042, 14.539679609708902, 13.683808135021614, 12.827936652857787, 12.827936652857248, 11.972065161498778, 11.972065161498191], \"Category\": [\"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\"], \"logprob\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, -3.1847, -3.8524, -3.9146, -4.0338, -4.3255, -4.35, -4.6025, -4.635, -4.6685, -4.7032, -4.7391, -4.7391, -4.7764, -4.8151, -4.8554, -4.8974, -4.9412, -4.9412, -4.987, -4.987, -5.035, -5.1386, -5.1386, -5.1947, -5.1947, -5.1947, -5.2541, -5.2541, -5.3173, -5.3173, -3.393, -3.8826, -3.8985, -4.0544, -4.217, -4.2393, -4.3338, -4.359, -4.4111, -4.6523, -4.8812, -4.9709, -5.0693, -5.1224, -5.1224, -5.1785, -5.1785, -5.1785, -5.238, -5.238, -5.238, -5.238, -5.238, -5.3012, -5.3012, -5.3686, -5.3686, -5.3686, -5.3686, -5.3686, -3.3971, -3.7567, -4.274, -4.4596, -4.4892, -4.5835, -4.617, -4.6876, -4.7636, -4.8897, -4.8897, -4.8897, -4.9355, -4.9355, -4.9835, -5.034, -5.034, -5.0871, -5.0871, -5.0871, -5.1432, -5.1432, -5.2026, -5.2026, -5.2026, -5.2658, -5.3333, -5.3333, -5.4056, -5.4056], \"loglift\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 1.0801, 1.0751, 1.0745, 1.0731, 1.069, 1.0686, 1.0639, 1.0632, 1.0624, 1.0616, 1.0608, 1.0608, 1.0598, 1.0588, 1.0578, 1.0566, 1.0553, 1.0553, 1.0539, 1.0539, 1.0524, 1.0489, 1.0489, 1.0468, 1.0468, 1.0468, 1.0445, 1.0445, 1.0419, 1.0419, 1.0885, 1.0844, 1.0842, 1.0824, 1.0802, 1.0799, 1.0784, 1.078, 1.0771, 1.0722, 1.0665, 1.0639, 1.0607, 1.0589, 1.0589, 1.0568, 1.0568, 1.0568, 1.0545, 1.0545, 1.0545, 1.0545, 1.0545, 1.0519, 1.0519, 1.049, 1.049, 1.049, 1.049, 1.049, 1.1091, 1.1063, 1.0999, 1.0967, 1.0962, 1.0943, 1.0935, 1.0919, 1.0901, 1.0867, 1.0867, 1.0867, 1.0853, 1.0853, 1.0838, 1.0822, 1.0822, 1.0804, 1.0804, 1.0804, 1.0784, 1.0784, 1.0762, 1.0762, 1.0762, 1.0737, 1.0708, 1.0708, 1.0675, 1.0675]}, \"token.table\": {\"Topic\": [2, 1, 2, 1, 1, 1, 2, 3, 1, 2, 2, 2, 1, 1, 3, 1, 3, 2, 3, 1, 3, 1, 3, 3, 3, 3, 1, 2, 2, 2, 3, 2, 3, 3, 2, 2, 3, 1, 3, 1, 3, 3, 1, 2, 2, 1, 1, 3, 1, 3, 2, 3, 3, 1, 2, 2, 1, 3, 1, 3, 2, 3, 3, 1, 2, 2, 3, 2, 3, 3, 2, 3, 1, 1, 2, 1, 3, 2, 1, 2, 1, 2, 2, 1, 1, 3, 2, 2, 1, 1], \"Freq\": [0.9761453391336758, 0.9416126214376073, 0.9630623141814538, 0.975918597310471, 0.9416126214375882, 0.980044286625748, 0.987774914648788, 0.9803226660107149, 0.9853659789926283, 0.9761453391336538, 0.976145339133666, 0.9357942185970927, 0.9872373760281992, 0.9940263856357071, 0.9849607249446574, 0.9938972494925091, 0.9628822901057086, 0.9482352026999378, 0.9656970011968813, 0.9821743171558471, 0.9564782771656212, 0.9689868745232874, 0.9845291979217179, 0.9937281722814895, 0.9463810841998402, 0.9656970011968798, 0.9634698459274803, 0.9877749146487812, 0.9877749146487766, 0.9698420694966464, 0.9628822901057142, 0.9482352026999433, 0.9188055570709451, 0.9500279360632431, 0.9817081511285973, 0.9779786040851988, 0.9188055570709001, 0.9893373644525947, 0.9969234874644789, 0.9655718656488257, 0.965697001196882, 0.9354583145159716, 0.9853659789926332, 0.9878347404142712, 0.9916982062550982, 0.9972430851558342, 0.9912828757042502, 0.9845291979217092, 0.9941038807160314, 0.9354583145160109, 0.948235202699974, 0.9845291979216957, 0.9740509533025563, 0.9941924589054237, 0.9830399939776528, 0.9482352026999428, 0.979880570546024, 0.9937281722814907, 0.9692701746622677, 0.960163020979785, 0.9761453391336605, 0.9739410754726938, 0.9743074427003153, 0.9938972494925071, 0.9482782759885542, 0.9630623141814458, 0.9743074427002973, 0.9972901460921672, 0.9628822901057236, 0.9684303194424776, 0.9792758163045525, 0.989096439434138, 0.9719790052749295, 0.9620456911128384, 0.9670567147809672, 0.9847970814975461, 0.9932574376225203, 0.9878746259262533, 0.9689868745232243, 0.9878123054119173, 0.9759185973104688, 0.9761453391336599, 0.9357942185970941, 0.9542802084916131, 0.9938972494925221, 0.9564782771656237, 0.9746931256919088, 0.9482352026999441, 0.9821743171558942, 0.9798805705460233], \"Term\": [\"000\", \"access\", \"aid\", \"air\", \"aircraft\", \"al\", \"assad\", \"attack\", \"attacks\", \"baghdad\", \"books\", \"campaign\", \"city\", \"civilians\", \"coalition\", \"command\", \"committed\", \"community\", \"conducted\", \"conflict\", \"continue\", \"control\", \"council\", \"counter\", \"daesh\", \"defeat\", \"destroyed\", \"east\", \"efforts\", \"ellwood\", \"end\", \"engaged\", \"fight\", \"fighters\", \"forces\", \"foreign\", \"france\", \"government\", \"group\", \"held\", \"humanitarian\", \"important\", \"including\", \"international\", \"iraq\", \"iraqi\", \"isil\", \"jordan\", \"killed\", \"library\", \"meeting\", \"members\", \"military\", \"minister\", \"mosul\", \"nations\", \"near\", \"new\", \"operation\", \"operations\", \"partners\", \"people\", \"political\", \"raqqah\", \"regime\", \"reports\", \"resolve\", \"said\", \"says\", \"secretary\", \"security\", \"state\", \"states\", \"strike\", \"strikes\", \"support\", \"syria\", \"syrian\", \"syrians\", \"tactical\", \"terrorist\", \"time\", \"tobias\", \"today\", \"turkey\", \"uk\", \"united\", \"war\", \"weapons\", \"work\"]}, \"R\": 30, \"lambda.step\": 0.01, \"plot.opts\": {\"xlab\": \"PC1\", \"ylab\": \"PC2\"}, \"topic.order\": [2, 1, 3]};\n","\n","function LDAvis_load_lib(url, callback){\n","  var s = document.createElement('script');\n","  s.src = url;\n","  s.async = true;\n","  s.onreadystatechange = s.onload = callback;\n","  s.onerror = function(){console.warn(\"failed to load library \" + url);};\n","  document.getElementsByTagName(\"head\")[0].appendChild(s);\n","}\n","\n","if(typeof(LDAvis) !== \"undefined\"){\n","   // already loaded: just create the visualization\n","   !function(LDAvis){\n","       new LDAvis(\"#\" + \"ldavis_el4171331903742717763286299554\", ldavis_el4171331903742717763286299554_data);\n","   }(LDAvis);\n","}else if(typeof define === \"function\" && define.amd){\n","   // require.js is available: use it to load d3/LDAvis\n","   require.config({paths: {d3: \"https://d3js.org/d3.v5\"}});\n","   require([\"d3\"], function(d3){\n","      window.d3 = d3;\n","      LDAvis_load_lib(\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.4.0/pyLDAvis/js/ldavis.v3.0.0.js\", function(){\n","        new LDAvis(\"#\" + \"ldavis_el4171331903742717763286299554\", ldavis_el4171331903742717763286299554_data);\n","      });\n","    });\n","}else{\n","    // require.js not available: dynamically load d3 & LDAvis\n","    LDAvis_load_lib(\"https://d3js.org/d3.v5.js\", function(){\n","         LDAvis_load_lib(\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.4.0/pyLDAvis/js/ldavis.v3.0.0.js\", function(){\n","                 new LDAvis(\"#\" + \"ldavis_el4171331903742717763286299554\", ldavis_el4171331903742717763286299554_data);\n","            })\n","         });\n","}\n","</script>"]},"metadata":{},"execution_count":57}]},{"cell_type":"markdown","source":["The same procedure is followed for the second document."],"metadata":{"id":"h8ZLi3gIW9ZI"}},{"cell_type":"code","source":["cv = CountVectorizer(max_df=0.95, min_df=0.0001, stop_words='english')\n","dtm = cv.fit_transform(df2['token'])\n","\n","dtm\n","\n","LDA = LatentDirichletAllocation(n_components=3, random_state=42)\n","LDA.fit(dtm)\n","\n","for index, topic in enumerate(LDA.components_):\n","    print(f'THE TOP 15 WORDS FOR TOPIC #{index}')\n","    print([cv.get_feature_names_out()[i] for i in topic.argsort()[-15:]])\n","    print('\\n')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G7MfZYKmhe8Y","executionInfo":{"status":"ok","timestamp":1738952511472,"user_tz":-60,"elapsed":2369,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"baf9c80f-3298-4141-a6e4-461a14f3c786"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["THE TOP 15 WORDS FOR TOPIC #0\n","['fight', 'ellwood', 'uk', 'work', 'states', 'air', 'near', 'military', 'minister', 'secretary', 'state', 'iraqi', 'security', 'syrian', 'isil']\n","\n","\n","THE TOP 15 WORDS FOR TOPIC #1\n","['2016', 'operations', 'use', 'united', 'including', 'al', 'government', 'people', 'foreign', 'aircraft', 'regime', 'support', 'said', 'syria', 'iraq']\n","\n","\n","THE TOP 15 WORDS FOR TOPIC #2\n","['islamic', 'time', 'civilians', '10', 'fighters', 'today', 'attack', 'counter', 'strikes', 'international', 'group', 'operation', 'strike', 'forces', 'coalition']\n","\n","\n"]}]},{"cell_type":"markdown","source":["* **Topic #0** emphasizes the role of the UK and international leaders in military actions. Words like Ellwood, UK, minister, secretary, states, security, Syrian, ISIL suggest discussions around government involvement, policy decisions, and military engagement in conflict zones.\n","\n","* **Topic #1** seems to cover military operations and foreign involvement, with terms like operations, foreign, aircraft, regime, Syria, Iraq, government, and support. The presence of 2016 may indicate a focus on specific events or policies from that time period.\n","\n","* **Topic #2** highlights military strikes, counterterrorism, and civilian impact. Words like Islamic, civilians, attack, counter, strikes, international, group, operation, coalition, and forces suggest coverage of both military actions and their humanitarian consequences."],"metadata":{"id":"0VMsqwBMYm_7"}},{"cell_type":"code","source":["panel2 = pyLDAvis.lda_model.prepare(LDA, dtm, cv)\n","pyLDAvis.display(panel2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":917},"id":"eEbsm4gnhMfR","executionInfo":{"status":"ok","timestamp":1738952515128,"user_tz":-60,"elapsed":260,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"52cb3149-6439-433e-90c1-5df4f3f11998"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"execute_result","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.4.0/pyLDAvis/js/ldavis.v1.0.0.css\">\n","\n","\n","<div id=\"ldavis_el4171331885580228969098838786\" style=\"background-color:white;\"></div>\n","<script type=\"text/javascript\">\n","\n","var ldavis_el4171331885580228969098838786_data = {\"mdsDat\": {\"x\": [-0.15986874664074685, 0.10105336065746345, 0.0588153859832835], \"y\": [-0.02376171258716145, -0.12302458976474893, 0.14678630235191034], \"topics\": [1, 2, 3], \"cluster\": [1, 1, 1], \"Freq\": [33.870290393964595, 33.31917607698912, 32.810533529046275]}, \"tinfo\": {\"Term\": [\"isil\", \"iraq\", \"syria\", \"said\", \"coalition\", \"forces\", \"strike\", \"operation\", \"syrian\", \"security\", \"iraqi\", \"group\", \"international\", \"state\", \"secretary\", \"support\", \"regime\", \"strikes\", \"counter\", \"minister\", \"aircraft\", \"foreign\", \"people\", \"government\", \"attack\", \"today\", \"military\", \"near\", \"air\", \"al\", \"iraq\", \"syria\", \"said\", \"support\", \"regime\", \"aircraft\", \"foreign\", \"people\", \"government\", \"al\", \"including\", \"united\", \"use\", \"operations\", \"2016\", \"city\", \"area\", \"friends\", \"oil\", \"world\", \"number\", \"earlier\", \"end\", \"long\", \"family\", \"oir\", \"airstrikes\", \"baghdad\", \"provide\", \"library\", \"isil\", \"syrian\", \"security\", \"iraqi\", \"state\", \"secretary\", \"minister\", \"military\", \"near\", \"air\", \"states\", \"work\", \"uk\", \"ellwood\", \"fight\", \"destroyed\", \"killed\", \"campaign\", \"defeat\", \"daesh\", \"turkey\", \"political\", \"efforts\", \"partners\", \"country\", \"continue\", \"force\", \"000\", \"artillery\", \"human\", \"coalition\", \"forces\", \"strike\", \"operation\", \"group\", \"international\", \"strikes\", \"counter\", \"attack\", \"today\", \"fighters\", \"10\", \"civilians\", \"time\", \"islamic\", \"terrorist\", \"deliver\", \"reports\", \"karim\", \"arab\", \"economic\", \"fighting\", \"town\", \"vehicle\", \"resolve\", \"conducted\", \"sadiq\", \"met\", \"having\", \"systems\"], \"Freq\": [23.0, 22.0, 14.0, 12.0, 10.0, 9.0, 9.0, 8.0, 8.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 21.90043847696363, 14.244878596055004, 12.330986782636488, 6.589296329667962, 6.589296329465259, 5.951327332811216, 5.951327332755407, 5.9513273326313, 5.95132733261179, 5.313356729924523, 5.313356729906076, 5.313356729784748, 4.675383836275982, 4.675383836175853, 4.037407517887322, 4.03740751768293, 4.037407517542334, 3.3994257410709943, 3.3994257409451674, 3.3994257401945145, 3.3994257397477505, 3.3994257395358964, 3.399425737827923, 3.3994257370658345, 3.3994257362538463, 2.761434474229805, 2.7614344741981225, 2.7614344741341035, 2.7614344738873378, 2.7614344728217266, 23.282726179761926, 7.901389255008191, 7.260497259839791, 7.260497259818103, 6.619604415136552, 6.619604415071895, 5.978710439015833, 5.337814909990647, 5.3378149095060765, 5.337814909454543, 4.6969171665158145, 4.696917165860676, 4.0560161106521955, 4.05601611057518, 4.056016109991283, 4.056016109814348, 3.415109780181051, 3.4151097795864507, 3.415109779499939, 3.4151097790446814, 3.415109778515544, 3.415109778508383, 3.4151097779307427, 3.415109777868864, 3.4151097774424364, 3.41510977698215, 2.7741942824973354, 2.774194281347806, 2.7741942813177607, 2.7741942811071696, 10.510961743310512, 9.22355665617169, 8.579853551597918, 7.936149949018845, 6.648740653222899, 6.648740653213932, 6.005034498240574, 6.005034498064855, 5.361326838261577, 5.361326838019177, 4.717617033174745, 4.073904021522796, 4.073904021319374, 4.073904021294903, 4.073904021109745, 3.430185901163473, 3.430185900563711, 3.430185900428002, 3.4301859003440667, 3.4301859000967045, 3.430185899898065, 3.4301858998696906, 3.430185898667542, 2.786458907933434, 2.7864589079032975, 2.786458907152898, 2.786458906881979, 2.786458905959403, 2.7864589050334883, 2.786458904900134], \"Total\": [23.0, 22.0, 14.0, 12.0, 10.0, 9.0, 9.0, 8.0, 8.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 22.33159668072011, 14.67604621132578, 12.762158606538557, 7.020495894490244, 7.0204958944915745, 6.382533394039372, 6.382533394039908, 6.382533394040712, 6.382533394040794, 5.744570904534153, 5.744570904534258, 5.744570904535241, 5.1066084306410575, 5.106608430642264, 4.468645980089983, 4.468645980091515, 4.468645980092885, 3.830683566740191, 3.8306835667408397, 3.8306835667455355, 3.830683566750355, 3.8306835667499515, 3.8306835667641055, 3.830683566769274, 3.83068356677223, 3.192721218071849, 3.192721218072975, 3.1927212180733733, 3.192721218073992, 3.1927212180834945, 23.71280858463254, 8.331502958139465, 7.690615223759137, 7.690615223759065, 7.049727489395232, 7.049727489395285, 6.40883975505393, 5.767952020743045, 5.767952020742834, 5.7679520207429, 5.1270642864777125, 5.1270642864773945, 4.4861765522797254, 4.486176552280207, 4.486176552279521, 4.486176552280283, 3.845288818193505, 3.845288818191864, 3.8452888181916527, 3.8452888181927927, 3.8452888181954417, 3.845288818192449, 3.8452888181927247, 3.845288818191728, 3.845288818195179, 3.845288818193907, 3.2044010843058692, 3.204401084305461, 3.2044010843070185, 3.204401084305644, 10.940033276261472, 9.652633029187184, 9.008932901939959, 8.365232771399223, 7.07783249649203, 7.077832496491894, 6.434132349071678, 6.434132349070477, 5.790432191698434, 5.790432191696835, 5.146732020140211, 4.503031827375949, 4.503031827374704, 4.503031827374487, 4.50303182737399, 3.8593316008294756, 3.85933160082452, 3.859331600824179, 3.859331600823311, 3.859331600820723, 3.8593316008199956, 3.8593316008196945, 3.8593316008114726, 3.2156313156075185, 3.215631315607423, 3.215631315603324, 3.2156313156009784, 3.2156313155957843, 3.2156313155923657, 3.2156313155903837], \"Category\": [\"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\"], \"logprob\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, -3.666, -4.0962, -4.2404, -4.8671, -4.8671, -4.9689, -4.9689, -4.9689, -4.9689, -5.0823, -5.0823, -5.0823, -5.2102, -5.2102, -5.3569, -5.3569, -5.3569, -5.5289, -5.5289, -5.5289, -5.5289, -5.5289, -5.5289, -5.5289, -5.5289, -5.7368, -5.7368, -5.7368, -5.7368, -5.7368, -3.5884, -4.6691, -4.7537, -4.7537, -4.8461, -4.8461, -4.9479, -5.0613, -5.0613, -5.0613, -5.1892, -5.1892, -5.3359, -5.3359, -5.3359, -5.3359, -5.5079, -5.5079, -5.5079, -5.5079, -5.5079, -5.5079, -5.5079, -5.5079, -5.5079, -5.5079, -5.7158, -5.7158, -5.7158, -5.7158, -4.3683, -4.499, -4.5713, -4.6493, -4.8263, -4.8263, -4.9282, -4.9282, -5.0416, -5.0416, -5.1695, -5.3162, -5.3162, -5.3162, -5.3162, -5.4881, -5.4881, -5.4881, -5.4881, -5.4881, -5.4881, -5.4881, -5.4881, -5.696, -5.696, -5.696, -5.696, -5.696, -5.696, -5.696], \"loglift\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 1.0631, 1.0528, 1.0483, 1.0192, 1.0192, 1.0127, 1.0127, 1.0127, 1.0127, 1.0046, 1.0046, 1.0046, 0.9944, 0.9944, 0.9811, 0.9811, 0.9811, 0.9632, 0.9632, 0.9632, 0.9632, 0.9632, 0.9632, 0.9632, 0.9632, 0.9375, 0.9375, 0.9375, 0.9375, 0.9375, 1.0807, 1.046, 1.0415, 1.0415, 1.0361, 1.0361, 1.0296, 1.0215, 1.0215, 1.0215, 1.0114, 1.0114, 0.9982, 0.9982, 0.9982, 0.9982, 0.9804, 0.9804, 0.9804, 0.9804, 0.9804, 0.9804, 0.9804, 0.9804, 0.9804, 0.9804, 0.9549, 0.9549, 0.9549, 0.9549, 1.0744, 1.069, 1.0656, 1.0618, 1.0519, 1.0519, 1.0454, 1.0454, 1.0374, 1.0374, 1.0274, 1.0143, 1.0143, 1.0143, 1.0143, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9965, 0.9712, 0.9712, 0.9712, 0.9712, 0.9712, 0.9712, 0.9712]}, \"token.table\": {\"Topic\": [2, 3, 1, 2, 1, 1, 1, 3, 1, 2, 3, 1, 2, 1, 3, 3, 3, 2, 3, 2, 2, 2, 3, 2, 1, 3, 2, 2, 1, 1, 2, 3, 3, 2, 3, 1, 1, 1, 3, 3, 2, 1, 3, 1, 2, 2, 3, 3, 2, 1, 1, 3, 2, 2, 2, 1, 1, 1, 3, 1, 2, 1, 2, 1, 1, 3, 3, 3, 1, 2, 2, 2, 2, 3, 3, 1, 1, 2, 3, 3, 3, 3, 3, 2, 2, 1, 1, 3, 2, 1], \"Freq\": [0.9362123907314293, 0.8882904126242694, 0.8951257311100429, 0.8668588056937426, 0.9400655867470088, 0.9396373172258067, 0.8703870285687538, 0.7773366764757975, 0.8951257311094616, 0.9362123907309743, 0.8634934033366883, 0.9396373172256894, 0.7801754671345242, 0.8951257311097359, 0.8882904126245151, 1.0054814023160834, 0.9329427740807821, 0.7801754671341097, 0.9325266678523958, 0.7801754671338516, 0.7801754671343358, 0.7801754671345671, 0.7773366764750327, 0.891627860247015, 0.7831500429948788, 0.777336676475944, 0.7801754671343496, 0.8916278602470302, 0.7831500429919851, 0.7831500429903241, 0.8916278602471664, 0.9714902544826467, 0.7773366764760047, 0.93621239073131, 0.9323880823798251, 0.94006558674693, 0.7831500429968742, 0.9400655867467994, 0.9890033429682596, 0.9329427740839614, 0.9362123907313759, 0.870387028568738, 0.9890033429682786, 0.9851512327819177, 0.9102002630913705, 0.9699399342727167, 0.888290412624656, 0.7773366764752762, 0.7801754671341913, 0.9396373172227107, 0.7831500429909285, 0.9329427740829696, 0.8668588056937209, 0.9362069000505865, 0.8668588056937525, 0.7831500429947962, 0.7831500429967416, 0.9396373172261381, 0.956339198037865, 0.9791234373870221, 0.7801754671345518, 0.9400655867468115, 0.7801754671344056, 0.9396373172255075, 0.9970805631397555, 0.7773366764751014, 0.9329427740795928, 0.9329427740814626, 0.9402798045349418, 0.9929461827467674, 0.910200263091362, 0.9929461827467748, 0.9752169507971967, 0.9990084395080759, 0.9325266678522217, 0.9970805631399444, 0.9539353991128713, 0.9602109055466873, 0.9329427740845364, 0.7773366764740346, 0.8882904126245579, 0.8634934033369267, 0.7773366764776607, 0.7801754671337984, 0.8916278602471258, 0.8703870285685891, 0.9791234373872534, 0.9329427740795652, 0.9752169507972572, 0.7831500429957816], \"Term\": [\"000\", \"10\", \"2016\", \"air\", \"aircraft\", \"airstrikes\", \"al\", \"arab\", \"area\", \"artillery\", \"attack\", \"baghdad\", \"campaign\", \"city\", \"civilians\", \"coalition\", \"conducted\", \"continue\", \"counter\", \"country\", \"daesh\", \"defeat\", \"deliver\", \"destroyed\", \"earlier\", \"economic\", \"efforts\", \"ellwood\", \"end\", \"family\", \"fight\", \"fighters\", \"fighting\", \"force\", \"forces\", \"foreign\", \"friends\", \"government\", \"group\", \"having\", \"human\", \"including\", \"international\", \"iraq\", \"iraqi\", \"isil\", \"islamic\", \"karim\", \"killed\", \"library\", \"long\", \"met\", \"military\", \"minister\", \"near\", \"number\", \"oil\", \"oir\", \"operation\", \"operations\", \"partners\", \"people\", \"political\", \"provide\", \"regime\", \"reports\", \"resolve\", \"sadiq\", \"said\", \"secretary\", \"security\", \"state\", \"states\", \"strike\", \"strikes\", \"support\", \"syria\", \"syrian\", \"systems\", \"terrorist\", \"time\", \"today\", \"town\", \"turkey\", \"uk\", \"united\", \"use\", \"vehicle\", \"work\", \"world\"]}, \"R\": 30, \"lambda.step\": 0.01, \"plot.opts\": {\"xlab\": \"PC1\", \"ylab\": \"PC2\"}, \"topic.order\": [2, 1, 3]};\n","\n","function LDAvis_load_lib(url, callback){\n","  var s = document.createElement('script');\n","  s.src = url;\n","  s.async = true;\n","  s.onreadystatechange = s.onload = callback;\n","  s.onerror = function(){console.warn(\"failed to load library \" + url);};\n","  document.getElementsByTagName(\"head\")[0].appendChild(s);\n","}\n","\n","if(typeof(LDAvis) !== \"undefined\"){\n","   // already loaded: just create the visualization\n","   !function(LDAvis){\n","       new LDAvis(\"#\" + \"ldavis_el4171331885580228969098838786\", ldavis_el4171331885580228969098838786_data);\n","   }(LDAvis);\n","}else if(typeof define === \"function\" && define.amd){\n","   // require.js is available: use it to load d3/LDAvis\n","   require.config({paths: {d3: \"https://d3js.org/d3.v5\"}});\n","   require([\"d3\"], function(d3){\n","      window.d3 = d3;\n","      LDAvis_load_lib(\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.4.0/pyLDAvis/js/ldavis.v3.0.0.js\", function(){\n","        new LDAvis(\"#\" + \"ldavis_el4171331885580228969098838786\", ldavis_el4171331885580228969098838786_data);\n","      });\n","    });\n","}else{\n","    // require.js not available: dynamically load d3 & LDAvis\n","    LDAvis_load_lib(\"https://d3js.org/d3.v5.js\", function(){\n","         LDAvis_load_lib(\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.4.0/pyLDAvis/js/ldavis.v3.0.0.js\", function(){\n","                 new LDAvis(\"#\" + \"ldavis_el4171331885580228969098838786\", ldavis_el4171331885580228969098838786_data);\n","            })\n","         });\n","}\n","</script>"]},"metadata":{},"execution_count":59}]},{"cell_type":"code","source":["%reset -f\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l99YwL0niQLc","executionInfo":{"status":"ok","timestamp":1739789228848,"user_tz":-60,"elapsed":584,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"2b9a733c-a64c-4ce1-a8eb-14649d62e691"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["# 2) LSTM MODEL"],"metadata":{"id":"zc6Ib9Z_iIYr"}},{"cell_type":"code","source":["# DF\n","import pandas as pd\n","import spacy\n","nlp = spacy.load('en_core_web_sm')\n","from spacy.tokens import Doc, Span\n","from spacy.matcher import DependencyMatcher\n","from spacy.matcher import Matcher\n","from sklearn.model_selection import train_test_split\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from keras.models import Sequential\n","from tensorflow.keras.utils import to_categorical\n","from keras.layers import Dense, Embedding, LSTM, SpatialDropout1D, Input, concatenate, Masking\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n","import numpy as np\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from sklearn.preprocessing import MultiLabelBinarizer\n","from sklearn.preprocessing import LabelEncoder\n","import urllib.request\n","import zipfile\n","import os\n","from collections import Counter\n","from sklearn.utils.class_weight import compute_class_weight\n","import tensorflow as tf\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","drive_path = '/content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2'\n","file_path = os.path.join(drive_path, 'file1.ann')\n","file_path2 = os.path.join(drive_path, 'file2.ann')\n","\n","def create_dataframe(content):\n","    with open(content, 'r', encoding='utf-8') as file:\n","        lines = file.readlines()\n","    data = [line.split() for line in lines]\n","    df = pd.DataFrame(data, columns=['token', 'tag'])\n","    df = df.drop(index=df.index[0])  # Drop the header or first line if it's not data.\n","    return df\n","\n","df_file1 = create_dataframe(file_path)\n","df_file2 = create_dataframe(file_path2)\n","\n","df_file1 = pd.concat([df_file1, df_file2], ignore_index=True)\n","\n","def pulisci_df(df):\n","    def is_arabic(word):\n","        if word is None or pd.isnull(word):  # Check for None or NaN\n","            return True\n","        word = str(word)\n","        #remove_chars = \"\\n\" + string.punctuation  + \"\\”\" + \"\\“\" + \"\\’\" + \"“”‘’–—…«»‹›\"\n","        #if word in remove_chars:\n","            #return True\n","        return any('\\u0600' <= char <= '\\u06FF' for char in word)\n","\n","    mask = df['token'].apply(is_arabic)\n","    return df[~mask]  # Keep rows where the condition is False\n","\n","df_file1 = pulisci_df(df_file1)\n","df_file1 = df_file1.reset_index(drop=True)\n","\n","print(df_file1.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pqnEWQtDiKWg","executionInfo":{"status":"ok","timestamp":1739789241696,"user_tz":-60,"elapsed":5349,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"c7a9313a-eca7-4654-d10f-3d0b8fe0ede6"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n","/usr/local/lib/python3.11/dist-packages/spacy/util.py:1740: UserWarning: [W111] Jupyter notebook detected: if using `prefer_gpu()` or `require_gpu()`, include it in the same cell right before `spacy.load()` to ensure that the model is loaded on the correct device. More information: http://spacy.io/usage/v3#jupyter-notebook-gpu\n","  warnings.warn(Warnings.W111)\n"]},{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","       token tag\n","0  Operation   O\n","1      Steel   O\n","2    Curtain   O\n","3          (   O\n","4     Arabic   O\n"]}]},{"cell_type":"code","source":["#CREATE A SPACY DOC FILE\n","\n","def pulisci_file(df, column_name):\n","    result = df[column_name].str.cat(sep=' ')\n","    return result\n","\n","file1_text = pulisci_file(df_file1, 'token')\n","\n","doc1 = nlp(file1_text)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"egqcXmvMjTJw","executionInfo":{"status":"ok","timestamp":1739789256468,"user_tz":-60,"elapsed":4987,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"f1d99ef2-02cc-42b1-f4bd-45d2f656d5f6"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["# CHANGE SPACY'S TAGGING SYSTEM TO IOB2 (ORIGINAL FORMAT OF THE DATASET)\n","\n","from spacy.training import align\n","\n","original_tokens = df_file1[\"token\"].tolist()\n","spacy_tokens = [token.text for token in doc1]\n","\n","alignments = align.get_alignments(original_tokens, spacy_tokens)\n","\n","aligned_iob2 = [\"O\"] * len(spacy_tokens)\n","\n","for original_idx, spacy_indices in enumerate(alignments[0]):\n","    tag = df_file1[\"tag\"][original_idx]\n","    if len(spacy_indices) == 1:\n","        aligned_iob2[spacy_indices[0]] = tag\n","    else:\n","        for idx in spacy_indices:\n","            aligned_iob2[idx] = tag\n","\n","df_test = pd.DataFrame({'tokens': spacy_tokens, 'tag': aligned_iob2})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sxC6kQICjZX7","executionInfo":{"status":"ok","timestamp":1739789263612,"user_tz":-60,"elapsed":1156,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"fb78b9de-05cd-4457-85cb-dff7147f1951"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["# REPLACE DOC1 TAGS WITH THE ORIGINAL IOB2 TAGS\n","\n","def extract_entities(df, tag_column=\"tag\"):\n","    entities = []\n","    current_entity = None\n","\n","    for index, row in df.iterrows():\n","        tag = row[tag_column]\n","\n","        if tag.startswith(\"B-\"):  # Begin a new entity\n","            if current_entity:  # Save the previous entity\n","                entities.append(current_entity)\n","            entity_type = tag[2:]  # Extract the entity type\n","            current_entity = {\"type\": entity_type, \"start\": index, \"end\": index + 1}\n","\n","        elif tag.startswith(\"I-\") and current_entity:  # Inside an entity\n","            entity_type = tag[2:]\n","            if current_entity[\"type\"] == entity_type:  # Ensure it's the same entity type\n","                current_entity[\"end\"] = index + 1  # Extend the current entity\n","\n","        else:  # Outside any entity\n","            if current_entity:  # Save the current entity\n","                entities.append(current_entity)\n","                current_entity = None\n","\n","    # Add the last entity if it exists\n","    if current_entity:\n","        entities.append(current_entity)\n","\n","    return entities\n","\n","# Extract entities\n","custom_entities = extract_entities(df_test)\n","\n","doc1.ents = [Span(doc1, entity[\"start\"], entity[\"end\"], label=entity[\"type\"]) for entity in custom_entities]\n","doc1.set_ents(doc1.ents, default=\"outside\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pjdn-GP-jtTk","executionInfo":{"status":"ok","timestamp":1739789269998,"user_tz":-60,"elapsed":1098,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"a3c6ab11-a9d2-46b0-d77b-692b08a0774b"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["data = []\n","for token in doc1:\n","    data.append([\n","        getattr(token, \"text\"),      # Token text\n","        getattr(token, \"lemma_\", None),   # Lemma\n","        getattr(token, \"pos_\", None),     # Part-of-speech tag\n","        getattr(token, \"dep_\", None),     # Dependency label\n","        getattr(token.head, \"text\", None),# Head text\n","        f\"{token.ent_iob_}-{token.ent_type_}\" if token.ent_type_ else \"O\"\n","    ])\n","\n","def join_and_clear(df, col_name, row1, row2):\n","    df.at[row1, col_name] = f\"{df.at[row1, col_name]} {df.at[row2, col_name]}\"\n","    df.loc[row2] = [None] * len(df.columns)\n","\n","df = pd.DataFrame(data, columns=[\"token\", \"Lemma\", \"POS\", \"DEP\", \"Head\", \"tag\"])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LuUoes0sj1Yf","executionInfo":{"status":"ok","timestamp":1739789282488,"user_tz":-60,"elapsed":1038,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"cdb8402e-32bf-4abc-bad5-4c8afbefcddf"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["data = []\n","\n","for sent in doc1.sents:\n","    sentence_text = sent.text\n","    iob_tags = []\n","    for token in sent:\n","        if token.ent_iob_ == \"O\":\n","            iob_tags.append(token.ent_iob_)\n","        else:\n","            iob_tags.append(token.ent_iob_ + \"-\" + token.ent_type_)\n","    iob_tags_str = ' '.join(iob_tags)\n","    data.append({\"sentence\": sentence_text, \"IOB_tag\": iob_tags_str})\n","\n","df1 = pd.DataFrame(data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"exCunZxDj93-","executionInfo":{"status":"ok","timestamp":1739789292661,"user_tz":-60,"elapsed":1060,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"de1b068f-65be-494b-ac23-2a75a45426c7"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["The following Python code is used for **data tokenization**, a key preprocessing step in Natural Language Processing (NLP) tasks. Tokenization converts text into numerical representations that can be processed by machine learning models."],"metadata":{"id":"v9nlv1yAkPL-"}},{"cell_type":"code","source":["#DATA TOKENIZATION\n","\n","tokenizer = Tokenizer()\n","tokenizer.fit_on_texts(df1['sentence'].values)\n","sequences = tokenizer.texts_to_sequences(df1['sentence'].values)\n","\n","IOB_tags = df['tag'].unique()\n","\n","# Map each tag to an integer\n","tag_encoder = LabelEncoder()\n","tag_encoder.fit(IOB_tags)\n","tag_to_int = {tag: idx for idx, tag in enumerate(tag_encoder.classes_)}\n","\n","df1['IOB_tag_sequences'] = [[tag_to_int[tag] for tag in seq.split()] for seq in df1['IOB_tag']]\n","\n","vocabulary_size_sentence = len(tokenizer.word_counts)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g-60TuJjkStD","executionInfo":{"status":"ok","timestamp":1739789297650,"user_tz":-60,"elapsed":993,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"7435a772-d0cd-4e7b-f92d-8ad282145bd5"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["#PADDING ONE HOT ENCODED LABELS FOR FOCAL CROSSENTROPY LOSS\n","\n","from tensorflow.keras.utils import to_categorical\n","\n","num_tags = len(tag_to_int)  # Total number of tags\n","Y_padded = pad_sequences(df1['IOB_tag_sequences'], maxlen=73, value=tag_to_int['O'], padding='post')\n","df1['IOB_tag_one_hot'] = [to_categorical(seq, num_classes=num_tags) for seq in Y_padded]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"87IEyJ55kXFO","executionInfo":{"status":"ok","timestamp":1739789302639,"user_tz":-60,"elapsed":903,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"69d47402-93d0-46e0-b5c9-87b21d3a053a"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["The following Python code is used for **padding sequences**. Padding ensures that all input sequences are of the same length, allowing them to be processed efficiently by the models. Since the longest sentence of the dataset is composed of 73 tokens, we set this value to determine the padding length."],"metadata":{"id":"4rj1h12Ski1K"}},{"cell_type":"code","source":["#PADDING\n","\n","sequence_len = np.array([len(s) for s in sequences])\n","longest_sequence = sequence_len.max() #73 tokens in the longest sequence\n","\n","print([(str(p) + '%', np.percentile(sequence_len, p)) for p in range(75,101, 5)])\n","max_sequence_len = 73\n","\n","X = pad_sequences(sequences, maxlen=max_sequence_len, padding='post')\n","\n","Y_iob = pad_sequences(df1['IOB_tag_sequences'], maxlen=max_sequence_len, value = tag_to_int['O'], padding='post')\n","#Y_iob = pad_sequences(df1['IOB_tag_one_hot'], maxlen=max_sequence_len, value = to_categorical(tag_to_int['O'], num_classes=num_tags), padding='post')\n","#USE IOB_tag_sequences FOR CATEGORIES INSTEAD OF ONE HOT ENCODINGS\n","\n","tokenizer.index_word[0] = '_PAD_'"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nxTobHSEkjtq","executionInfo":{"status":"ok","timestamp":1739789309922,"user_tz":-60,"elapsed":487,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"e3198fbd-5f7e-462d-b890-e4194d806fe8"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["[('75%', 29.0), ('80%', 32.0), ('85%', 35.0), ('90%', 39.0), ('95%', 44.0), ('100%', 73.0)]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["The data is split for training and evaluation by creating separate datasets. The training set is used to teach the model, while the testing set assesses the model's performance on unseen data, helping to identify overfitting or underfitting issues."],"metadata":{"id":"hu53pbIukpci"}},{"cell_type":"code","source":["#TEST AND TRAIN SPLIT\n","indices = np.arange(len(df1['sentence']))\n","X_train_sentences, temp_sentences, Y_train_IOB, temp_tags, train_indices, temp_indices = train_test_split(\n","     X, Y_iob, indices, test_size=0.3, random_state=42)\n","\n","X_val_sentences, X_test_sentences, Y_val_IOB, Y_test_IOB, val_indices, test_indices = train_test_split(\n","    temp_sentences, temp_tags, temp_indices, test_size=0.3333, random_state=42)\n","\n","print(X_train_sentences.shape, Y_train_IOB.shape)\n","print(X_test_sentences.shape, Y_test_IOB.shape)\n","print(X_val_sentences.shape, Y_val_IOB.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8_Nci3JvkqXu","executionInfo":{"status":"ok","timestamp":1739789314355,"user_tz":-60,"elapsed":1014,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"49be3d54-3699-4a82-f47b-192c2109cc0b"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["(696, 73) (696, 73)\n","(100, 73) (100, 73)\n","(199, 73) (199, 73)\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["Pre-trained GloVe (Global Vectors for Word Representation) embeddings are loaded to construct an embedding matrix.  \n","The GloVe embedding matrix serves as a mapping mechanism that converts words into dense, continuous vectors that capture semantic and syntactic properties. These embeddings are derived from extensive corpora, enabling the representation of words based on their contextual usage in large-scale text data.\n","\n","The GloVe embedding matrix plays a crucial role in improving model performance for the following reasons:\n","\n","* **Semantic Feature Representation**: The embeddings capture the semantic relationships between words. For instance, entities such as \"Paris,\" \"London,\" and \"Berlin\" will have similar vector representations due to their contextual similarities, aiding the model in recognizing them as geographic locations.\n","\n","* **Dimensionality Reduction**:\n","GloVe embeddings offer dense representations that are both computationally efficient and rich in semantic information.\n","\n","* **Enhanced Generalization**:\n","Pre-trained embeddings allow the model to generalize better to unseen data. Even if specific entities are absent from the training dataset, the model can infer their entity type based on their similarity to known words within the embedding space."],"metadata":{"id":"yNvNZCBrlr_k"}},{"cell_type":"code","source":["import os\n","import numpy as np\n","def load_glove_embedding_matrix(word_index, embed_dim):\n","    \"\"\"Load Glove embeddings.\n","\n","    \"\"\"\n","    !wget http://nlp.stanford.edu/data/glove.6B.zip\n","    !unzip glove*.zip\n","\n","    path = 'glove.6B.100d.txt'\n","\n","    embeddings_index = {}\n","    with open(path, encoding='utf-8') as f:\n","        for line in f:\n","            values = line.split()\n","            word = values[0]\n","            coefs = np.asarray(values[1:], dtype='float32')\n","            embeddings_index[word] = coefs\n","\n","    print('Found %s word vectors.' % len(embeddings_index))\n","    embedding_matrix = np.zeros((len(word_index) + 1, embed_dim))\n","    for word, i in word_index.items():\n","        embedding_vector = embeddings_index.get(word)\n","        if embedding_vector is not None:\n","            # words not found in embedding index will be all-zeros.\n","            embedding_matrix[i] = embedding_vector\n","\n","    return embedding_matrix\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IbF9ksgalvm3","executionInfo":{"status":"ok","timestamp":1739012004665,"user_tz":-60,"elapsed":97,"user":{"displayName":"Ilaria Crippa","userId":"17848308566105295357"}},"outputId":"238571db-d0ef-457c-ee7f-ea1fb8f5d68b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["USE_GLOVE=True\n","glove_matrix=None\n","if USE_GLOVE:\n","    embedding_dim = 100\n","    glove_matrix = load_glove_embedding_matrix(tokenizer.word_index, embedding_dim)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Sbj0k4OMlzr5","executionInfo":{"status":"ok","timestamp":1739012218304,"user_tz":-60,"elapsed":210154,"user":{"displayName":"Ilaria Crippa","userId":"17848308566105295357"}},"outputId":"bc2f86e4-09b8-4a97-c9d3-2939e0a82bfd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["--2025-02-08 10:53:26--  http://nlp.stanford.edu/data/glove.6B.zip\n","Resolving nlp.stanford.edu (nlp.stanford.edu)... 171.64.67.140\n","Connecting to nlp.stanford.edu (nlp.stanford.edu)|171.64.67.140|:80... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://nlp.stanford.edu/data/glove.6B.zip [following]\n","--2025-02-08 10:53:26--  https://nlp.stanford.edu/data/glove.6B.zip\n","Connecting to nlp.stanford.edu (nlp.stanford.edu)|171.64.67.140|:443... connected.\n","HTTP request sent, awaiting response... 301 Moved Permanently\n","Location: https://downloads.cs.stanford.edu/nlp/data/glove.6B.zip [following]\n","--2025-02-08 10:53:26--  https://downloads.cs.stanford.edu/nlp/data/glove.6B.zip\n","Resolving downloads.cs.stanford.edu (downloads.cs.stanford.edu)... 171.64.64.22\n","Connecting to downloads.cs.stanford.edu (downloads.cs.stanford.edu)|171.64.64.22|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 862182613 (822M) [application/zip]\n","Saving to: ‘glove.6B.zip’\n","\n","glove.6B.zip        100%[===================>] 822.24M  5.04MB/s    in 2m 40s  \n","\n","2025-02-08 10:56:06 (5.15 MB/s) - ‘glove.6B.zip’ saved [862182613/862182613]\n","\n","Archive:  glove.6B.zip\n","  inflating: glove.6B.50d.txt        \n","  inflating: glove.6B.100d.txt       \n","  inflating: glove.6B.200d.txt       \n","  inflating: glove.6B.300d.txt       \n","Found 400000 word vectors.\n"]}]},{"cell_type":"markdown","source":["Class and sample weights are calculated to mitigate the impact of class imbalance in the IOB tag sequences, which can cause the model to favor more frequent tags and overlook rare ones. By flattening all IOB tags, balanced class weights are computed using `compute_class_weight`, assigning higher weights to less frequent tags to ensure they contribute more significantly during training. These weights are organized in a dictionary for easy access. Since one-hot encoding isn’t used, sample weights are directly computed from the integer-encoded IOB tags (`Y_train_IOB`). This helps the model pay more attention to underrepresented classes, improving its ability to recognize rare tags effectively."],"metadata":{"id":"nbOyROGAmoFl"}},{"cell_type":"code","source":["train_tags = df1[\"IOB_tag_sequences\"].iloc[train_indices]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M1slGGu4mpwk","executionInfo":{"status":"ok","timestamp":1739012257820,"user_tz":-60,"elapsed":31,"user":{"displayName":"Ilaria Crippa","userId":"17848308566105295357"}},"outputId":"90fdea3f-7b1e-4de3-8b20-5a96ffb13d24"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["#WEIGHTS\n","from sklearn.utils.class_weight import compute_class_weight\n","from sklearn.utils.class_weight import compute_sample_weight\n","\n","y_true_flat = [tag for sentence in train_tags for tag in sentence]\n","\n","class_weights = compute_class_weight(\n","    class_weight=\"balanced\",\n","    classes=np.unique(y_true_flat),\n","    y=y_true_flat)\n","\n","class_weight_dict = {class_idx: weight for class_idx, weight in zip(np.unique(y_true_flat), class_weights)}\n","\n","print(class_weight_dict)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_qH7VytGmu2E","executionInfo":{"status":"ok","timestamp":1739012260785,"user_tz":-60,"elapsed":12,"user":{"displayName":"Ilaria Crippa","userId":"17848308566105295357"}},"outputId":"a0123fc2-631c-47da-dac2-878ced541215"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{0: 24.095238095238095, 1: 1.4979277679100058, 2: 16.21794871794872, 3: 56.22222222222222, 4: 25.555555555555557, 5: 0.8424908424908425, 6: 2.219298245614035, 7: 6.588541666666667, 8: 5.897435897435898, 9: 12.777777777777779, 10: 8.187702265372168, 11: 1.1979166666666667, 12: 11.712962962962964, 13: 28.11111111111111, 14: 281.1111111111111, 15: 0.5926446474584212, 16: 1.564625850340136, 17: 10.541666666666666, 18: 4.764595103578155, 19: 13.386243386243386, 20: 0.0696969696969697}\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["To prevent extreme weight values from negatively impacting model training, a minimum weight of 0.5 is set to avoid underweighting rare classes, while a maximum weight of 5 limits the influence of overly frequent classes. The `np.clip` function constrains all class and sample weights within this range, ensuring that no class is given too little or too much importance. This helps maintain balanced learning and model stability, reducing the risk of overfitting or underfitting specific classes."],"metadata":{"id":"y2EsSRe1m2Fi"}},{"cell_type":"code","source":["min_weight = max(0.5, min(class_weight_dict.values()))  # Prevent too-low weights\n","max_weight = min(5, max(class_weight_dict.values()))  # Prevent too-high weights\n","\n","class_weight_dict = {k: np.clip(v, min_weight, max_weight) for k, v in class_weight_dict.items()}"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tmrcCB4vm3y3","executionInfo":{"status":"ok","timestamp":1739012269356,"user_tz":-60,"elapsed":1674,"user":{"displayName":"Ilaria Crippa","userId":"17848308566105295357"}},"outputId":"c41e90a4-06f4-4f8c-a75c-c00e1869a80b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["sample_weights = np.array([compute_sample_weight(class_weight_dict, y) for y in Y_train_IOB])\n","sample_weights = np.clip(sample_weights, min_weight, max_weight)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TrcEA8Sem8h8","executionInfo":{"status":"ok","timestamp":1739012271366,"user_tz":-60,"elapsed":132,"user":{"displayName":"Ilaria Crippa","userId":"17848308566105295357"}},"outputId":"c5601664-3e77-4dbc-fac5-8b8536fb72ba"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["An LSTM-based neural network architecture is defined to perform sequence labeling for IOB tag prediction. The model begins with an embedding layer initialized with pre-trained GloVe vectors, set as non-trainable to retain semantic information, and `mask_zero=True` to handle padded tokens. This is followed by two stacked bidirectional LSTM layers with dropout and recurrent dropout to prevent overfitting, both configured with `return_sequences=True` to produce output for each token in the sequence. A dense layer with a softmax activation function generates probability distributions over the IOB tags for each token.\n","\n","The model is compiled using the Adam optimizer and `SparseCategoricalCrossentropy` as the loss function, suitable for integer-encoded labels. Accuracy is used as the evaluation metric.\n","\n","To enhance training performance, `ModelCheckpoint` saves the best model weights based on validation loss, while `EarlyStopping` monitors validation loss to halt training if no improvement is observed for five consecutive epochs, restoring the best weights.\n","\n","The model is trained on the padded input sequences (`X_train_final`) and their corresponding IOB tags (`Y_train_final`), incorporating sample weights to address class imbalance. Training history, including loss and accuracy for both training and validation sets, is plotted to visualize performance over epochs.\n","\n","After training, the model predicts IOB tags for the test set (`X_test_sentences`), with the final predictions obtained by selecting the class with the highest probability for each token."],"metadata":{"id":"8-YNDVFgnAw5"}},{"cell_type":"code","source":["#LSTM NETWORK ARCHITECTURE\n","from keras.callbacks import ModelCheckpoint, EarlyStopping\n","from keras.losses import SparseCategoricalCrossentropy\n","from keras.losses import CategoricalCrossentropy\n","from keras.losses import CategoricalFocalCrossentropy\n","import matplotlib.pyplot as plt\n","import random\n","from keras.layers import Bidirectional\n","\n","SEED_VALUE = 42\n","random.seed(SEED_VALUE)\n","np.random.seed(SEED_VALUE)\n","tf.random.set_seed(SEED_VALUE)\n","\n","embed_dim = 100\n","lstm_out = 100\n","\n","model = Sequential()\n","model.add(Embedding(vocabulary_size_sentence+1, embed_dim, weights=[glove_matrix],\n","                            trainable=False, input_length = X.shape[1], mask_zero=True))\n","model.add(Bidirectional(LSTM(lstm_out, return_sequences=True, dropout=0.4, recurrent_dropout=0.3))) #return_sequences is set to True because our output should be a sequence of IOB tags\n","model.add(Dense(len(tag_to_int), activation='softmax')) #there are 21 IOB tags in file 1\n","model.compile(loss = SparseCategoricalCrossentropy(), optimizer='adam',metrics = ['accuracy'])\n","\n","#use sparse_categorical_crossentropy because the categories are mapped to integers, not one-hot encoded\n","print(model.summary())\n","\n","best_model_file = 'lstm-conll-best-model.weights.h5'\n","\n","checkpoint = ModelCheckpoint(\n","    best_model_file,\n","    save_weights_only=True,\n","    save_best_only=True\n",")\n","\n","early_stopping_callback = EarlyStopping(monitor=\"val_loss\", min_delta=0.01, patience=8, verbose=1, mode=\"auto\",\n","                                        restore_best_weights=True)\n","\n","callbacks = [checkpoint, early_stopping_callback]\n","\n","history = model.fit(x=X_train_sentences, y = Y_train_IOB, sample_weight=sample_weights,\n","          validation_data=(X_val_sentences, Y_val_IOB),\n","          epochs = 30, verbose = 2, batch_size=64, callbacks = callbacks)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"c_qknOmJnD-9","executionInfo":{"status":"ok","timestamp":1739014438608,"user_tz":-60,"elapsed":419451,"user":{"displayName":"Ilaria Crippa","userId":"17848308566105295357"}},"outputId":"b129d27f-416c-4bad-c69b-4a6eed919e0c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n","/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["\u001b[1mModel: \"sequential_6\"\u001b[0m\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_6\"</span>\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n","│ embedding_6 (\u001b[38;5;33mEmbedding\u001b[0m)              │ ?                           │         \u001b[38;5;34m390,300\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ bidirectional_6 (\u001b[38;5;33mBidirectional\u001b[0m)      │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                      │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n","└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n","│ embedding_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)              │ ?                           │         <span style=\"color: #00af00; text-decoration-color: #00af00\">390,300</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ bidirectional_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>)      │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n","└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m390,300\u001b[0m (1.49 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">390,300</span> (1.49 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m390,300\u001b[0m (1.49 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">390,300</span> (1.49 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["None\n","Epoch 1/30\n","11/11 - 20s - 2s/step - accuracy: 0.7786 - loss: 2.4304 - val_accuracy: 0.8934 - val_loss: 1.4992\n","Epoch 2/30\n","11/11 - 11s - 963ms/step - accuracy: 0.5830 - loss: 2.1417 - val_accuracy: 0.2060 - val_loss: 1.5702\n","Epoch 3/30\n","11/11 - 20s - 2s/step - accuracy: 0.2080 - loss: 2.0189 - val_accuracy: 0.2058 - val_loss: 1.4247\n","Epoch 4/30\n","11/11 - 21s - 2s/step - accuracy: 0.3988 - loss: 1.9088 - val_accuracy: 0.2036 - val_loss: 1.3797\n","Epoch 5/30\n","11/11 - 21s - 2s/step - accuracy: 0.2062 - loss: 1.7991 - val_accuracy: 0.2005 - val_loss: 1.3195\n","Epoch 6/30\n","11/11 - 6s - 570ms/step - accuracy: 0.2050 - loss: 1.6874 - val_accuracy: 0.1974 - val_loss: 1.2940\n","Epoch 7/30\n","11/11 - 16s - 1s/step - accuracy: 0.2017 - loss: 1.6081 - val_accuracy: 0.1956 - val_loss: 1.2886\n","Epoch 8/30\n","11/11 - 21s - 2s/step - accuracy: 0.2012 - loss: 1.5498 - val_accuracy: 0.1952 - val_loss: 1.2595\n","Epoch 9/30\n","11/11 - 19s - 2s/step - accuracy: 0.1992 - loss: 1.4851 - val_accuracy: 0.1938 - val_loss: 1.2488\n","Epoch 10/30\n","11/11 - 15s - 1s/step - accuracy: 0.2015 - loss: 1.4258 - val_accuracy: 0.1949 - val_loss: 1.2138\n","Epoch 11/30\n","11/11 - 6s - 526ms/step - accuracy: 0.1998 - loss: 1.4038 - val_accuracy: 0.1942 - val_loss: 1.2042\n","Epoch 12/30\n","11/11 - 17s - 2s/step - accuracy: 0.1998 - loss: 1.3863 - val_accuracy: 0.1951 - val_loss: 1.2021\n","Epoch 13/30\n","11/11 - 18s - 2s/step - accuracy: 0.2016 - loss: 1.3304 - val_accuracy: 0.1957 - val_loss: 1.1765\n","Epoch 14/30\n","11/11 - 20s - 2s/step - accuracy: 0.1999 - loss: 1.3098 - val_accuracy: 0.1939 - val_loss: 1.1804\n","Epoch 15/30\n","11/11 - 9s - 859ms/step - accuracy: 0.2006 - loss: 1.2919 - val_accuracy: 0.1958 - val_loss: 1.1641\n","Epoch 16/30\n","11/11 - 7s - 656ms/step - accuracy: 0.2010 - loss: 1.2639 - val_accuracy: 0.1930 - val_loss: 1.1923\n","Epoch 17/30\n","11/11 - 13s - 1s/step - accuracy: 0.2012 - loss: 1.2503 - val_accuracy: 0.1943 - val_loss: 1.1626\n","Epoch 18/30\n","11/11 - 19s - 2s/step - accuracy: 0.5078 - loss: 1.2400 - val_accuracy: 0.8826 - val_loss: 1.1598\n","Epoch 19/30\n","11/11 - 7s - 594ms/step - accuracy: 0.8827 - loss: 1.2170 - val_accuracy: 0.8833 - val_loss: 1.1575\n","Epoch 20/30\n","11/11 - 13s - 1s/step - accuracy: 0.8842 - loss: 1.2035 - val_accuracy: 0.8808 - val_loss: 1.1695\n","Epoch 21/30\n","11/11 - 7s - 598ms/step - accuracy: 0.8839 - loss: 1.1831 - val_accuracy: 0.8835 - val_loss: 1.1303\n","Epoch 22/30\n","11/11 - 12s - 1s/step - accuracy: 0.8872 - loss: 1.1715 - val_accuracy: 0.8807 - val_loss: 1.1503\n","Epoch 23/30\n","11/11 - 21s - 2s/step - accuracy: 0.8847 - loss: 1.1448 - val_accuracy: 0.8835 - val_loss: 1.1319\n","Epoch 24/30\n","11/11 - 13s - 1s/step - accuracy: 0.8868 - loss: 1.1407 - val_accuracy: 0.8833 - val_loss: 1.1393\n","Epoch 25/30\n","11/11 - 13s - 1s/step - accuracy: 0.8856 - loss: 1.1343 - val_accuracy: 0.8798 - val_loss: 1.1949\n","Epoch 26/30\n","11/11 - 6s - 554ms/step - accuracy: 0.8862 - loss: 1.1236 - val_accuracy: 0.8852 - val_loss: 1.1241\n","Epoch 27/30\n","11/11 - 14s - 1s/step - accuracy: 0.8873 - loss: 1.1126 - val_accuracy: 0.8842 - val_loss: 1.1378\n","Epoch 28/30\n","11/11 - 20s - 2s/step - accuracy: 0.8866 - loss: 1.0959 - val_accuracy: 0.8844 - val_loss: 1.1323\n","Epoch 29/30\n","11/11 - 7s - 601ms/step - accuracy: 0.8878 - loss: 1.0819 - val_accuracy: 0.8850 - val_loss: 1.1215\n","Epoch 29: early stopping\n","Restoring model weights from the end of the best epoch: 21.\n"]}]},{"cell_type":"code","source":["#LSTM NETWORK ARCHITECTURE\n","from keras.callbacks import ModelCheckpoint, EarlyStopping\n","from keras.losses import SparseCategoricalCrossentropy\n","from keras.losses import CategoricalCrossentropy\n","from keras.losses import CategoricalFocalCrossentropy\n","import matplotlib.pyplot as plt\n","import random\n","from keras.layers import Bidirectional\n","fig, axes = plt.subplots(1, 2, figsize=(15, 7))\n","\n","axes[0].plot(history.history['loss'], label='Training Loss')\n","axes[0].plot(history.history['val_loss'], label='Validation Loss')\n","axes[0].set_xlabel('Epochs')\n","axes[0].set_ylabel('Loss')\n","axes[0].legend()\n","axes[0].set_title('Training and Validation Loss')\n","axes[0].grid()\n","\n","axes[1].plot(history.history['accuracy'], label='Training Accuracy')\n","axes[1].plot(history.history['val_accuracy'], label='Validation Accuracy')\n","axes[1].set_xlabel('Epochs')\n","axes[1].set_ylabel('Accuracy')\n","axes[1].legend()\n","axes[1].set_title('Training and Validation Accuracy')\n","axes[1].grid()\n","\n","plt.tight_layout()\n","plt.show(block=True)\n","plt.interactive(False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":862},"id":"OPuRQZU6NLPz","executionInfo":{"status":"error","timestamp":1739789366415,"user_tz":-60,"elapsed":953,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"e5160eb5-4c8c-4dbf-bb0c-52acd80bfa1c"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"error","ename":"NameError","evalue":"name 'history' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-35-a3e136a091c1>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplots\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m7\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0maxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'loss'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Training Loss'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'val_loss'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Validation Loss'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_xlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Epochs'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'history' is not defined"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x700 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#TEST\n","from sklearn.metrics import accuracy_score, classification_report\n","\n","prediction_probas = model.predict(X_test_sentences) # Output shape = (num_samples, sequence_length, num_classes)\n","predictions = np.argmax(prediction_probas, axis=-1)\n","\n","y_true_flat = [tag for sentence in Y_test_IOB for tag in sentence]\n","y_pred_flat = [pred for sentence in predictions for pred in sentence]\n","\n","all_labels = sorted(set(y_true_flat + y_pred_flat))\n","int_to_tag = {idx: tag for tag, idx in tag_to_int.items()}\n","label_indices = [int_to_tag[label] for label in all_labels]\n","\n","report = classification_report(y_true_flat, y_pred_flat, labels=all_labels, target_names=label_indices, output_dict=True)\n","report_df = pd.DataFrame(report).transpose()\n","\n","report_df.to_csv('test_classification_report.csv', index=True)\n","report_df = report_df.round(2)\n","print(report_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":274},"id":"kyKnyDddrjKG","executionInfo":{"status":"error","timestamp":1739789901141,"user_tz":-60,"elapsed":532,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"a62d557c-6141-4c51-84be-d355487eaea8"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"error","ename":"NameError","evalue":"name 'model' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-36-d9a81292c75b>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclassification_report\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mprediction_probas\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test_sentences\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# Output shape = (num_samples, sequence_length, num_classes)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mpredictions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprediction_probas\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"]}]},{"cell_type":"code","source":["# CONFUSION MATRIX\n","from sklearn.metrics import confusion_matrix\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import ConfusionMatrixDisplay\n","from matplotlib.colors import Normalize  # Import for color normalization\n","\n","cm = confusion_matrix(y_true_flat, y_pred_flat, labels=list(int_to_tag.keys()))\n","\n","# Custom color scaling\n","norm = Normalize(vmin=0, vmax=70)  # Adjust vmax to control the darkest color threshold\n","\n","disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[int_to_tag[i] for i in int_to_tag.keys()])\n","disp.plot(cmap=\"Blues\", xticks_rotation='vertical')  # Plot without norm first\n","\n","disp.ax_.images[0].set_norm(norm)\n","\n","plt.show(block=True)\n","plt.interactive(False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":597},"id":"u19o9gaOWfJ4","executionInfo":{"status":"ok","timestamp":1739014672033,"user_tz":-60,"elapsed":2442,"user":{"displayName":"Ilaria Crippa","userId":"17848308566105295357"}},"outputId":"60be9c98-0054-4c95-f19d-484abee57d6c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["NER is performed on an input sentence using the trained model. The input sentence is tokenized and converted into a sequence of numerical tokens. To ensure compatibility with the model, the tokenized sentence is padded to the fixed maximum sequence length. The model then predicts the IOB tags for each token in the sentence.\n","\n","To handle padding effectively, the code dynamically determines the actual length of the input sentence and excludes any predictions related to padding tokens. The predicted labels are mapped back to their corresponding tag names using the `int_to_tag` dictionary.\n","\n","Finally, the original tokens and their predicted labels are organized into a structured format using a pandas DataFrame, for a clear and concise output."],"metadata":{"id":"TvNGaRVLYKMt"}},{"cell_type":"code","source":["# PREDICT A NEW SENTENCE\n","import pandas as pd\n","import numpy as np\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","\n","# Sample sentence for prediction\n","sentence_prediction = 'Carter thanked Abadi for nearly two years of a close personal partnership, and noted the continued supporting role the United States and the counter - ISIL coalition can play in Iraq s efforts to destroy the terrorist group, according to the release'\n","\n","# Tokenization and padding\n","tokenized_sentence = tokenizer.texts_to_sequences([sentence_prediction])[0]\n","sentence_length = len(tokenized_sentence)  # Get the actual sentence length\n","\n","padded_sentence = pad_sequences([tokenized_sentence], maxlen=max_sequence_len, padding='post')\n","\n","int_to_tag = {idx: tag for tag, idx in tag_to_int.items()}\n","\n","# Model prediction\n","IOB_prediction = model.predict(padded_sentence, batch_size=1, verbose=2)[0]\n","predicted_values = np.argmax(IOB_prediction, axis=-1)\n","\n","predicted_tags = [int_to_tag[idx] for idx in predicted_values[:sentence_length]]\n","original_tokens = tokenizer.sequences_to_texts([tokenized_sentence])[0].split()\n","\n","output_df = pd.DataFrame({\n","    'Token': original_tokens,\n","    'Predicted_Label': predicted_tags})\n","\n","print(output_df)"],"metadata":{"id":"cTCXB9CHYOAe"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 3) BERT MODEL"],"metadata":{"id":"Zczp1eLpYUXu"}},{"cell_type":"code","source":["%reset -f"],"metadata":{"id":"M0ghNQ0WYrvR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739790738041,"user_tz":-60,"elapsed":1964,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"8046116c-cbe7-4919-e864-1231b01b0de6"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["DATA LOADING, CLEANING, DATAFRAMES AND IMPORTING SPACY"],"metadata":{"id":"BCK6OWZLYfmI"}},{"cell_type":"code","source":["import pandas as pd\n","import spacy\n","nlp = spacy.load('en_core_web_sm')\n","from spacy.tokens import Doc, Span\n","import numpy as np\n","import os\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","drive_path = '/content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2'\n","file_path = os.path.join(drive_path, 'file1.ann')\n","file_path2 = os.path.join(drive_path, 'file2.ann')\n","\n","def create_dataframe(content):\n","    with open(content, 'r', encoding='utf-8') as file:\n","        lines = file.readlines()\n","    data = [line.split() for line in lines]\n","    df = pd.DataFrame(data, columns=['token', 'tag'])\n","    df = df.drop(index=df.index[0])\n","    return df\n","\n","df_file1 = create_dataframe(file_path)\n","df_file2 = create_dataframe(file_path2)\n","\n","df_file1 = pd.concat([df_file1, df_file2], ignore_index=True)\n","\n","def pulisci_df(df):\n","    def is_arabic(word):\n","        if word is None or pd.isnull(word):\n","            return True\n","        word = str(word)\n","        return any('\\u0600' <= char <= '\\u06FF' for char in word)\n","\n","    mask = df['token'].apply(is_arabic)\n","    return df[~mask]\n","\n","df_file1 = pulisci_df(df_file1)\n","df_file1 = df_file1.reset_index(drop=True)\n","\n","print(df_file1.head())\n","\n","def pulisci_file(df, column_name):\n","    result = df[column_name].str.cat(sep=' ')\n","    return result\n","\n","file1_text = pulisci_file(df_file1, 'token')\n","\n","doc1 = nlp(file1_text)"],"metadata":{"id":"ysQwNqpzYjb_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739790765186,"user_tz":-60,"elapsed":8535,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"973ce72e-3b34-4b76-b5f1-fa6845d81217"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n","/usr/local/lib/python3.11/dist-packages/spacy/util.py:1740: UserWarning: [W111] Jupyter notebook detected: if using `prefer_gpu()` or `require_gpu()`, include it in the same cell right before `spacy.load()` to ensure that the model is loaded on the correct device. More information: http://spacy.io/usage/v3#jupyter-notebook-gpu\n","  warnings.warn(Warnings.W111)\n"]},{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","       token tag\n","0  Operation   O\n","1      Steel   O\n","2    Curtain   O\n","3          (   O\n","4     Arabic   O\n"]}]},{"cell_type":"markdown","source":["\n","The code loads text data from two annotation files stored in Google Drive. It reads the files, splits each line into tokens and tags, and stores them in a DataFrame. It then merges the two datasets into one. A cleaning function removes any words containing Arabic characters. After resetting the index, the cleaned text is concatenated into a single string. Finally, the text is processed using the spaCy language model for further natural language processing tasks."],"metadata":{"id":"BgXCuhLMYpk0"}},{"cell_type":"markdown","source":["CHANGE SPACY'S TAGGING SYSTEM TO IOB2 (ORIGINAL FORMAT OF THE DATASET)"],"metadata":{"id":"D7XCPL8PY44C"}},{"cell_type":"code","source":["from spacy.training import align\n","\n","original_tokens = df_file1[\"token\"].tolist()\n","spacy_tokens = [token.text for token in doc1]\n","\n","alignments = align.get_alignments(original_tokens, spacy_tokens)\n","\n","aligned_iob2 = [\"O\"] * len(spacy_tokens)\n","\n","for original_idx, spacy_indices in enumerate(alignments[0]):\n","    tag = df_file1[\"tag\"][original_idx]\n","    if len(spacy_indices) == 1:\n","        aligned_iob2[spacy_indices[0]] = tag\n","    else:\n","        for idx in spacy_indices:\n","            aligned_iob2[idx] = tag\n","\n","df_test = pd.DataFrame({'tokens': spacy_tokens, 'tag': aligned_iob2})"],"metadata":{"id":"U2lHr2W3Y59x","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739790772150,"user_tz":-60,"elapsed":581,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"571c8481-9eec-47cc-ef34-ad2dbb02f93e"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["The code aligns tokens from the original dataset with tokens processed by spaCy. It first extracts tokens from the DataFrame and the spaCy-processed document. The align.get_alignments() function maps original tokens to their corresponding spaCy tokens. A new list is initialized with \"O\" tags, meaning no entity. Then, for each original token, the corresponding tag is assigned to the aligned spaCy tokens. If a token splits into multiple spaCy tokens, all are assigned the same tag. Finally, a new DataFrame is created containing the spaCy tokens and their aligned tags."],"metadata":{"id":"5yfUxhZnY-cM"}},{"cell_type":"markdown","source":["REPLACE DOC1 TAGS WITH THE ORIGINAL IOB2 TAGS"],"metadata":{"id":"4Yr8WEOkZE0X"}},{"cell_type":"code","source":["def extract_entities(df, tag_column=\"tag\"):\n","    entities = []\n","    current_entity = None\n","\n","    for index, row in df.iterrows():\n","        tag = row[tag_column]\n","\n","        if tag.startswith(\"B-\"):  # Begin a new entity\n","            if current_entity:  # Save the previous entity\n","                entities.append(current_entity)\n","            entity_type = tag[2:]  # Extract the entity type\n","            current_entity = {\"type\": entity_type, \"start\": index, \"end\": index + 1}\n","\n","        elif tag.startswith(\"I-\") and current_entity:  # Inside an entity\n","            entity_type = tag[2:]\n","            if current_entity[\"type\"] == entity_type:  # Ensure it's the same entity type\n","                current_entity[\"end\"] = index + 1  # Extend the current entity\n","\n","        else:  # Outside any entity\n","            if current_entity:  # Save the current entity\n","                entities.append(current_entity)\n","                current_entity = None\n","\n","    # Add the last entity if it exists\n","    if current_entity:\n","        entities.append(current_entity)\n","\n","    return entities"],"metadata":{"id":"C18OOTYnZF-a","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739790959988,"user_tz":-60,"elapsed":421,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"a377d041-bb1e-4428-e8a8-7c5c6af10b7d"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["\n","This function extracts named entities from a DataFrame containing tokenized text and their corresponding tags. It iterates through the DataFrame row by row, checking the tag of each token. If a tag starts with \"B-\", a new entity begins, and the previous entity (if any) is saved. If a tag starts with \"I-\", the function extends the current entity, provided it matches the same type. If a token has no entity tag, the function saves the current entity and resets. Finally, it returns a list of all extracted entities, each represented as a dictionary containing the entity type, start index, and end index."],"metadata":{"id":"zRMZNyHKZKUx"}},{"cell_type":"markdown","source":["EXTRACTING ENTITIES"],"metadata":{"id":"2bqGsIrUZOLO"}},{"cell_type":"code","source":["\n","custom_entities = extract_entities(df_test)\n","\n","doc1.ents = [Span(doc1, entity[\"start\"], entity[\"end\"], label=entity[\"type\"]) for entity in custom_entities]\n","doc1.set_ents(doc1.ents, default=\"outside\")"],"metadata":{"id":"ul08CCo_ZREv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739790966328,"user_tz":-60,"elapsed":1141,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"94f9820e-5a49-42a9-a9be-30badf663382"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["\n","The code extracts named entities from the df_test DataFrame using the extract_entities function. It then creates spaCy Span objects for each entity, which represent the start and end positions of the entity in the doc1 spaCy document. These spans are labeled with the entity type and assigned to the doc1 document. Any tokens not part of an entity are labeled as \"outside.\" This process prepares the document for further entity analysis or visualization."],"metadata":{"id":"pC68Nj9HZVS4"}},{"cell_type":"markdown","source":["CREATE A DF WITH GRAMMATICAL INFO AND TAG"],"metadata":{"id":"xkcXsPrbZZxf"}},{"cell_type":"code","source":["data = []\n","for token in doc1:\n","    data.append([\n","        getattr(token, \"text\"),      # Token text\n","        getattr(token, \"lemma_\", None),   # Lemma\n","        getattr(token, \"pos_\", None),     # Part-of-speech tag\n","        getattr(token, \"dep_\", None),     # Dependency label\n","        getattr(token.head, \"text\", None),# Head text\n","        f\"{token.ent_iob_}-{token.ent_type_}\" if token.ent_type_ else \"O\"\n","    ])"],"metadata":{"id":"zewJTybAZcZ-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739790971185,"user_tz":-60,"elapsed":721,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"aefa2c36-38bd-4b89-d39c-d64281eb1399"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["\n","The code processes each token in a spaCy document, extracting key information like the token's text, lemma, part of speech, dependency label, head token, and entity information (if applicable). It stores this data in a list, with each element representing a token's features. If a token is part of an entity, it includes the IOB tag and entity type; otherwise, it assigns the label \"O\"."],"metadata":{"id":"Gi2XN0YCZfxq"}},{"cell_type":"code","source":["def join_and_clear(df, col_name, row1, row2):\n","    df.at[row1, col_name] = f\"{df.at[row1, col_name]} {df.at[row2, col_name]}\"\n","    df.loc[row2] = [None] * len(df.columns)"],"metadata":{"id":"r0bAVdaLZjjB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739790979029,"user_tz":-60,"elapsed":1063,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"8a3dd995-9b83-47d2-a540-09e79ff85ddf"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["The function join_and_clear performs two tasks. It concatenates the values from two rows of a specified column into a single value. Specifically, it combines the value of col_name from row1 and row2, and stores this combined value in row1. After that, it clears all the data in row2, essentially setting all the values in that row to None. This function is useful for merging adjacent rows while cleaning up the second one."],"metadata":{"id":"jY7j-ExUZp3x"}},{"cell_type":"code","source":["df = pd.DataFrame(data, columns=[\"token\", \"Lemma\", \"POS\", \"DEP\", \"Head\", \"tag\"])"],"metadata":{"id":"4IS61CAsZthD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739790986535,"user_tz":-60,"elapsed":499,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"139d1044-5037-400d-9834-894ac70faeff"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["CREATE A DF WITH THE SENTENCES\n"],"metadata":{"id":"7cCznV-DZxyF"}},{"cell_type":"code","source":["data = []\n","\n","for sent in doc1.sents:\n","    sentence_text = sent.text\n","    iob_tags = []\n","    for token in sent:\n","        if token.ent_iob_ == \"O\":\n","            iob_tags.append(token.ent_iob_)\n","        else:\n","            iob_tags.append(token.ent_iob_ + \"-\" + token.ent_type_)\n","    iob_tags_str = ' '.join(iob_tags)\n","    data.append({\"sentence\": sentence_text, \"IOB_tag\": iob_tags_str})\n","\n","df1 = pd.DataFrame(data)"],"metadata":{"id":"OgO1gt7PZ1HX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739791000792,"user_tz":-60,"elapsed":477,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"cff015c0-4606-4029-fdb0-4b9defb0f728"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["The code processes sentences from a spaCy document (doc1), extracting the sentence text and IOB tags for each token. It generates a dataframe where each row contains a sentence and its corresponding IOB tags, marking tokens outside entities as \"O\" and tagging tokens within entities with the appropriate IOB type. The resulting dataframe contains sentences along with their entity annotations."],"metadata":{"id":"WmjFZtuWZ4gq"}},{"cell_type":"markdown","source":["1.1) TRAINING AND VALIDATION DIVISION"],"metadata":{"id":"FelVxGkaZ_Mk"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","np.random.seed(42)\n","\n","train_sentences, temp_sentences, train_tags, temp_tags = train_test_split(\n","    df1[\"sentence\"], df1[\"IOB_tag\"], test_size=0.3, random_state=42\n",")\n","\n","val_sentences, test_sentences, val_tags, test_tags = train_test_split(\n","    temp_sentences, temp_tags, test_size=0.3333, random_state=42\n",")\n","\n","#TOKENIZATION AND TAG ADJUSTMENT\n","from transformers import AutoTokenizer\n","\n","tokenizer = AutoTokenizer.from_pretrained(\"distilbert-base-uncased\")\n","\n","def tokenize_and_align_labels(sentences, tags, tokenizer):\n","    tokenized_inputs = []\n","    aligned_labels = []\n","\n","    for sentence, tag_seq in zip(sentences, tags):\n","        # Split sentence into words\n","        sentence_tokens = sentence.split()\n","        tokenized_sentence = tokenizer(\n","            sentence_tokens,\n","            is_split_into_words=True,\n","            truncation=True,\n","            padding=\"max_length\"  # Optional: Add padding\n","        )\n","\n","        word_ids = tokenized_sentence.word_ids()  # Map sub-tokens to words\n","        aligned_tags = []\n","        current_word_idx = None\n","\n","        # Align tags to tokens\n","        for word_idx in word_ids:\n","            if word_idx is None:\n","                aligned_tags.append(\"O\")  # Padding, CLS, or SEP tokens\n","            else:\n","                if word_idx != current_word_idx:\n","                    aligned_tags.append(tag_seq.split()[word_idx])\n","                else:\n","                    aligned_tags.append(tag_seq.split()[word_idx])\n","                current_word_idx = word_idx\n","\n","        tokenized_inputs.append({\n","            \"input_ids\": tokenized_sentence[\"input_ids\"],\n","            \"attention_mask\": tokenized_sentence[\"attention_mask\"]\n","        })\n","        aligned_labels.append(aligned_tags)\n","\n","    return tokenized_inputs, aligned_labels\n","\n","train_tokenized, train_labels = tokenize_and_align_labels(train_sentences, train_tags, tokenizer)\n","val_tokenized, val_labels = tokenize_and_align_labels(val_sentences, val_tags, tokenizer)\n","test_tokenized, test_labels = tokenize_and_align_labels(test_sentences, test_tags, tokenizer)\n"],"metadata":{"id":"TmYiQxOSaAxI","colab":{"base_uri":"https://localhost:8080/","height":310,"referenced_widgets":["07abd5794b5a4fea942dbdcf4c1f3476","cd02ea41ea4647cb8b44cd1625fcb79f","b641168431de44bab012bc6a6ce3bcd2","d59987ec11c34223a7c7639c308c5e8b","57070e40d543455ca3544b53edd5d169","4aac558ee4c44cfbb9a2c050628b63ed","d661933177e64ba2a45a626cb6b21e94","cf68a1727933496e868b98fb04f18f67","9bb9c76797a949428567d8766b4fb68c","d65051cf3dd043d3a39b3b0659418d72","ee7f58b6c3fd43c7a07924974634eaeb","d9cc8a76d79749e79e281e184bacc4d8","72319fe64d114746ae0f529b81fa83a0","4875355869e549c4934723fedeb17ae8","ebe30e50c2994630881e599832cbd5f8","9cdf5f1b4f2540579e93c22007a4b813","0bd5a2e2061f47d4a5c074af7d19070d","efccc3a8c86b414dbc08afc176b9e15d","01c72c6ca852448c9eccc1255ad25209","8ff6dce2b6e94e76891d39b423ab108c","a418b0613a744735a386b4aeb988edab","e78afc101250467eadc95a2d770f3094","450e9ec466a94398870af000047fb681","d86d54e4e35f44b0b9ca706a9fe08eb3","61ac3bd8747a4aa29654878a6a522090","e4b1f698355a42a7a162afde7781f6ef","be1387b0b240418195ec2edf4b31e447","6fab88f68f754fd2a504aea348ce452f","dff3d5452f664d48a503fb0937ce3139","ec09b8f0956c45fc95d9eaef30958dcb","af735e8fb03145b3a9de471a0d505634","6499886503264998b50cdbb980aba115","9c76798fd5c841d2914033fa11667ea2","379cfc1e46ab43b8bc31ddab2366e581","669a0ab8d7694ab4b27a3101584eca8d","e52cdd229ebf43308d0a4ea2aedbcc53","fe9ed98c1d324acbb92a74acd8bdb0a2","b5dd1584891748aeb05c0ff7dce1fecf","844c204bfaf148b0acf83d68539a8800","401863c065054545a57a7327e94ea504","a2406f43126e4a4d9d8d431f0dfa82e1","b3f420d5137e40358881095817166b52","510a6b02fa6e4c80a2ae2aa7ebbf64d9","f5c2dac386324af4b25f09c1bb3e1308"]},"executionInfo":{"status":"ok","timestamp":1739791020509,"user_tz":-60,"elapsed":5082,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"bea7918c-a8e6-4d7e-8952-ddbb61fae57b"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n","/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n","The secret `HF_TOKEN` does not exist in your Colab secrets.\n","To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n","You will be able to reuse this secret in all of your notebooks.\n","Please note that authentication is recommended but still optional to access public models or datasets.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["tokenizer_config.json:   0%|          | 0.00/48.0 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"07abd5794b5a4fea942dbdcf4c1f3476"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["config.json:   0%|          | 0.00/483 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d9cc8a76d79749e79e281e184bacc4d8"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"450e9ec466a94398870af000047fb681"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"379cfc1e46ab43b8bc31ddab2366e581"}},"metadata":{}}]},{"cell_type":"markdown","source":["\n","The code splits the dataset into training, validation, and test sets using a 70-20-10 ratio. It tokenizes the sentences using the \"distilbert-base-uncased\" model from Hugging Face and aligns the IOB tags to the tokenized sentences. The tokens are mapped to their corresponding words, and padding tokens receive the \"O\" tag. The function processes the training, validation, and test sets and returns the tokenized inputs with input_ids and attention_mask as well as the aligned tags for each set."],"metadata":{"id":"795yqqjPaGcL"}},{"cell_type":"markdown","source":["1.2) PROPER DATASET FOR TRAINING"],"metadata":{"id":"jjH_clDgaKs3"}},{"cell_type":"code","source":["!pip install datasets\n"],"metadata":{"id":"2XbESqP1aOGp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739791033562,"user_tz":-60,"elapsed":3640,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"e4537921-8133-4fe7-d87b-9d613522901f"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["Collecting datasets\n","  Downloading datasets-3.3.0-py3-none-any.whl.metadata (19 kB)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from datasets) (3.17.0)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from datasets) (1.26.4)\n","Requirement already satisfied: pyarrow>=15.0.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (17.0.0)\n","Collecting dill<0.3.9,>=0.3.0 (from datasets)\n","  Downloading dill-0.3.8-py3-none-any.whl.metadata (10 kB)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from datasets) (2.2.2)\n","Requirement already satisfied: requests>=2.32.2 in /usr/local/lib/python3.11/dist-packages (from datasets) (2.32.3)\n","Requirement already satisfied: tqdm>=4.66.3 in /usr/local/lib/python3.11/dist-packages (from datasets) (4.67.1)\n","Collecting xxhash (from datasets)\n","  Downloading xxhash-3.5.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (12 kB)\n","Collecting multiprocess<0.70.17 (from datasets)\n","  Downloading multiprocess-0.70.16-py311-none-any.whl.metadata (7.2 kB)\n","Requirement already satisfied: fsspec<=2024.12.0,>=2023.1.0 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2024.12.0,>=2023.1.0->datasets) (2024.10.0)\n","Requirement already satisfied: aiohttp in /usr/local/lib/python3.11/dist-packages (from datasets) (3.11.12)\n","Requirement already satisfied: huggingface-hub>=0.24.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.28.1)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from datasets) (24.2)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from datasets) (6.0.2)\n","Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (2.4.6)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (1.3.2)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (25.1.0)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (1.5.0)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (6.1.0)\n","Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (0.2.1)\n","Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (1.18.3)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.24.0->datasets) (4.12.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (2.3.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (2025.1.31)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.1)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas->datasets) (1.17.0)\n","Downloading datasets-3.3.0-py3-none-any.whl (484 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m484.9/484.9 kB\u001b[0m \u001b[31m30.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading dill-0.3.8-py3-none-any.whl (116 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m116.3/116.3 kB\u001b[0m \u001b[31m11.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading multiprocess-0.70.16-py311-none-any.whl (143 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m143.5/143.5 kB\u001b[0m \u001b[31m14.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading xxhash-3.5.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (194 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m194.8/194.8 kB\u001b[0m \u001b[31m18.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: xxhash, dill, multiprocess, datasets\n","Successfully installed datasets-3.3.0 dill-0.3.8 multiprocess-0.70.16 xxhash-3.5.0\n"]}]},{"cell_type":"code","source":["\n","from datasets import Dataset\n","import numpy as np\n","\n","train_dataset = Dataset.from_dict({\n","    'text': train_sentences,\n","    'labels': train_labels\n","})\n","\n","val_dataset = Dataset.from_dict({\n","    'text': val_sentences,\n","    'labels': val_labels\n","})\n","\n","test_dataset = Dataset.from_dict({\n","    'text': test_sentences,\n","    'labels': test_labels\n","})\n"],"metadata":{"id":"B9IFnHH-aR9e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739791047025,"user_tz":-60,"elapsed":842,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"174077ae-161e-47ca-cf32-dd03bd9c1750"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["1.3) CONVERTING LABELS TO NUMERIC IN DATASETS"],"metadata":{"id":"VqepHpvIaWJB"}},{"cell_type":"code","source":["def build_tag2unique(df, tag_column=\"IOB_tag\"):\n","    all_tags = df[tag_column].str.split().sum()\n","    unique_tags = set(all_tags)\n","    tag2unique = {tag: idx for idx, tag in enumerate(sorted(unique_tags))}\n","\n","    return tag2unique\n","\n","tag2unique = build_tag2unique(df1, tag_column=\"IOB_tag\")\n","print(\"tag2unique:\", tag2unique)\n","\n","def map_labels_to_numeric(example, tag2unique):\n","    example['labels'] = [tag2unique[tag] for tag in example['labels']]\n","    return example\n","\n","train_dataset = train_dataset.map(lambda x: map_labels_to_numeric(x, tag2unique))\n","val_dataset = val_dataset.map(lambda x: map_labels_to_numeric(x, tag2unique))\n","test_dataset = test_dataset.map(lambda x: map_labels_to_numeric(x, tag2unique))\n"],"metadata":{"id":"8RmRIMxpaZEk","colab":{"base_uri":"https://localhost:8080/","height":187,"referenced_widgets":["255e11f816fe4e18812a796c8204104e","65c518baab2e43c9bfd4c5c5383f2194","6564d82866054e7280db3568277255e4","0d2002d8b5664293ab484913e1900a38","518810c5e8324ced92d75bf0e415d1e3","2c164b79ea904c3793b6d7129ffcfd89","e4892460193b440c9c0a9849689a36a6","faab01328f2744c6b7ddec1a2f18c785","12ad62998054459292316f5598416b8d","54033db0ea0e4002b00a3567edcfbbd7","ac3fc871e93440f4b5e8001c68a9d474","d2af2dc6d58c47a5a7e56f968421982c","a89af2eaa87c4ecd90084dc659f75f67","6f105ad44bb14bea96e033b649311787","cff3d61935a54d878e9a509eacfeab6b","8388a7fd42004e4383b43802dbe51e2e","0e4e006720234bb5a30970e07a3fc113","b52fb80adb7d45d7b606978677bde477","6eaff611f8844cf6ab417728065206b6","709e8e2e45f4422c854f252f7d7232e0","0a46f7be15f940e08accc706f7409f76","2ecfa2aa1f6941c08bc62bc0944af065","c2afac0d94464410bc58159bc35e2157","d14c58579fa145d49bb6e1368dbb1a9e","510a770cd0704cdfbc41db2a609928d4","5f71f4a1e7b9425589053ec875536470","67e2757779dd4ec5aeb8b79f35b296e8","0ff9e654efdb4a7a90aa7e88e1c041eb","8b0eb6b8552a44eeb201e6adab09ffde","843e51cbc22043f39302c1d6b1f52798","13806f98eb9e4e7a91e6a696d5e7fb1f","01e412f61bf74dce8e4f7d7dbceadd27","05aea10012794f4f8a90acbea8c4db54"]},"executionInfo":{"status":"ok","timestamp":1739791062127,"user_tz":-60,"elapsed":1793,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"48bf4e5a-df4f-4fad-bad3-c267af6580f5"},"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["tag2unique: {'B-DocumentReference': 0, 'B-Location': 1, 'B-MilitaryPlatform': 2, 'B-Money': 3, 'B-Nationality': 4, 'B-Organisation': 5, 'B-Person': 6, 'B-Quantity': 7, 'B-Temporal': 8, 'B-Weapon': 9, 'I-DocumentReference': 10, 'I-Location': 11, 'I-MilitaryPlatform': 12, 'I-Money': 13, 'I-Nationality': 14, 'I-Organisation': 15, 'I-Person': 16, 'I-Quantity': 17, 'I-Temporal': 18, 'I-Weapon': 19, 'O': 20}\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"display_data","data":{"text/plain":["Map:   0%|          | 0/696 [00:00<?, ? examples/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"255e11f816fe4e18812a796c8204104e"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Map:   0%|          | 0/199 [00:00<?, ? examples/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d2af2dc6d58c47a5a7e56f968421982c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Map:   0%|          | 0/100 [00:00<?, ? examples/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c2afac0d94464410bc58159bc35e2157"}},"metadata":{}}]},{"cell_type":"markdown","source":["The code creates a dictionary called tag2unique that maps each unique IOB tag in the dataset to a unique integer index. The function build_tag2unique extracts all tags from the given tag column, converts them into a set to eliminate duplicates, and then sorts them to generate the dictionary with tags as keys and indices as values.\n","\n","The second part of the code defines the map_labels_to_numeric function, which takes an example (a sentence with its corresponding tags) and maps its tags to the numeric labels using the tag2unique dictionary. This function is then applied to the training, validation, and test datasets to replace the text tags with numeric labels."],"metadata":{"id":"OLGPxnhFaebz"}},{"cell_type":"markdown","source":["1.4) TENSORS FOR INPUTS"],"metadata":{"id":"J8UN0IwDaj31"}},{"cell_type":"code","source":["train_input_ids = [item[\"input_ids\"] for item in train_tokenized]\n","train_attention_mask = [item[\"attention_mask\"] for item in train_tokenized]\n","\n","val_input_ids = [item[\"input_ids\"] for item in val_tokenized]\n","val_attention_mask = [item[\"attention_mask\"] for item in val_tokenized]\n","\n","test_input_ids = [item[\"input_ids\"] for item in test_tokenized]\n","test_attention_mask = [item[\"attention_mask\"] for item in test_tokenized]"],"metadata":{"id":"B0NO3i_Kam_j","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739791069401,"user_tz":-60,"elapsed":460,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"87bdcc65-100a-4b9e-9308-3e33c914dcd8"},"execution_count":57,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["\n","The code processes tokenized sentences to create the input_ids and attention_mask needed for a model like BERT. The input_ids represent the tokens from the sentence converted into their corresponding integer IDs using a tokenizer. The attention_mask is a binary mask where 1 indicates that the token should be attended to and 0 means it is a padding token and should be ignored. The code extracts both input_ids and attention_mask for the training, validation, and test datasets, ensuring that padding tokens do not affect the model's attention mechanism. These components are essential for training and testing a machine learning model like BERT"],"metadata":{"id":"JPkCnXYNarb2"}},{"cell_type":"markdown","source":["1.5) PROPER DATASET (ATTENTION MASKS AND INPUT IDS)"],"metadata":{"id":"_5Tk6OE2awO-"}},{"cell_type":"code","source":["\n","def add_tokenized_columns(dataset, tokenized_sentences):\n","    input_ids = [item['input_ids'] for item in tokenized_sentences]\n","    attention_mask = [item['attention_mask'] for item in tokenized_sentences]\n","\n","    dataset = dataset.add_column('input_ids', input_ids)\n","    dataset = dataset.add_column('attention_mask', attention_mask)\n","    return dataset\n","\n","train_dataset = add_tokenized_columns(train_dataset, train_tokenized)\n","val_dataset = add_tokenized_columns(val_dataset, val_tokenized)\n","test_dataset = add_tokenized_columns(test_dataset, test_tokenized)\n"],"metadata":{"id":"TUjTaNUEaxbU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739791075906,"user_tz":-60,"elapsed":2352,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"f18eab9a-dfce-452e-8366-109e572089c0"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["This code defines a function add_tokenized_columns that adds two columns to a dataset: input_ids and attention_mask. These columns are extracted from the tokenized_sentences for each dataset (training, validation, and test). The input_ids are the tokenized representations of the sentences converted to integers by the tokenizer, while the attention_mask indicates which tokens are actual words (1) and which are padding (0). After creating these columns, the function updates the dataset by adding these two new columns, and the datasets (train, validation, test) are modified accordingly to include the input_ids and attention_mask."],"metadata":{"id":"pRIUYdXaa3YJ"}},{"cell_type":"markdown","source":["2) TRAINING"],"metadata":{"id":"VabEuNN3a7bG"}},{"cell_type":"code","source":["import torch\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","print(f\"Dispositivo in uso: {device}\")"],"metadata":{"id":"SALsGDGza_d-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","os.environ[\"WANDB_DISABLED\"] = \"true\""],"metadata":{"id":"riBHioHmbAMA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from collections import Counter\n","import torch\n","def compute_class_weights(labels, num_classes):\n","    flat_labels = [label for sublist in labels for label in sublist]\n","    class_counts = Counter(flat_labels)\n","    total_tokens = sum(class_counts.values())\n","    class_weights = [\n","        total_tokens / (num_classes * class_counts.get(cls, 1))\n","        for cls in range(num_classes)\n","    ]\n","    return torch.tensor(class_weights).float().to(device)\n"],"metadata":{"id":"Ymhfk1PFbDzQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["The code defines a function compute_class_weights that calculates the class weights for a token classification task based on the frequency of labels. It flattens the label list, counts the occurrences of each label, and computes the weight for each class using the total number of tokens and the number of classes. The weights are returned as a tensor to be used during model training, addressing potential class imbalances."],"metadata":{"id":"ABYYaDECbIYt"}},{"cell_type":"code","source":["label_to_id = {label: idx for idx, label in enumerate(sorted(set(label for seq in train_labels for label in seq)))}\n","id_to_label = {idx: label for label, idx in label_to_id.items()}\n","\n","train_labels_ids = [[label_to_id[label] for label in seq] for seq in train_labels]\n","\n","all_labels_ids = train_labels_ids\n","\n","class_weights = compute_class_weights(all_labels_ids, num_classes=len(label_to_id))\n","\n","print(f\"Class weights: {class_weights}\")\n"],"metadata":{"id":"YujhSQ6YbMCW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class_weights = compute_class_weights(all_labels_ids, num_classes=len(label_to_id))\n","\n","min_weight = 1.0\n","max_weight = 4.0\n","\n","class_weights_min = class_weights.min()\n","class_weights_max = class_weights.max()\n","scaled_class_weights = (class_weights - class_weights_min) / (class_weights_max - class_weights_min)\n","scaled_class_weights = scaled_class_weights * (max_weight - min_weight) + min_weight\n","\n","print(f\"Scaled weights (1-4): {scaled_class_weights}\")\n"],"metadata":{"id":"i5GDZK16bPoq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch\n","import torch.nn.functional as F\n","\n","class FocalLoss(torch.nn.Module):\n","    def __init__(self, alpha=None, gamma=2.0, reduction=\"mean\"):\n","        super(FocalLoss, self).__init__()\n","        self.alpha = alpha\n","        self.gamma = gamma\n","        self.reduction = reduction\n","\n","    def forward(self, logits, labels):\n","\n","        probs = F.softmax(logits, dim=-1)\n","        log_probs = F.log_softmax(logits, dim=-1)\n","\n","        labels_one_hot = F.one_hot(labels, num_classes=logits.size(-1)).float()\n","        probs = (probs * labels_one_hot).sum(dim=-1)\n","        log_probs = (log_probs * labels_one_hot).sum(dim=-1)\n","\n","        focal_term = (1 - probs) ** self.gamma\n","\n","        loss = -focal_term * log_probs\n","\n","        if self.alpha is not None:\n","            alpha_t = self.alpha[labels]\n","            loss = alpha_t * loss\n","\n","        if self.reduction == \"mean\":\n","            return loss.mean()\n","        elif self.reduction == \"sum\":\n","            return loss.sum()\n","        else:\n","            return loss\n","\n","focal_loss = FocalLoss(alpha=scaled_class_weights, gamma=2.0)\n","\n","def custom_forward(inputs, labels):\n","    logits = model(**inputs).logits\n","    loss = focal_loss(logits.view(-1, logits.size(-1)), labels.view(-1))\n","    return loss, logits\n"],"metadata":{"id":"tgd9JWJ0bUxT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["\n","The code defines a custom FocalLoss class designed to improve performance in scenarios where the dataset has class imbalance. This loss function modifies the standard cross-entropy loss by focusing more on difficult examples, which are typically underrepresented in imbalanced datasets.\n","\n","The FocalLoss class contains an initialization method where parameters such as alpha, gamma, and reduction are defined. Alpha helps balance the importance of different classes, especially when there is class imbalance. Gamma controls the focus on harder examples by reducing the loss for well-classified examples. The reduction parameter defines how to aggregate the loss, either by averaging or summing it.\n","\n","The forward method calculates the loss. It first applies softmax to the logits to convert them into probabilities and uses one-hot encoding to match the true labels with the predicted probabilities. A focal term is computed to emphasize harder examples. The loss is then calculated by combining the focal term and the log-probabilities. If alpha is specified, it is applied to weight the loss for each class. The loss is returned, reduced according to the specified method.\n","\n","Finally, a custom forward function (custom_forward) is provided. This function calculates the model's logits and computes the focal loss by comparing these logits with the true labels. The result is the loss and the logits, which can be used for further training steps."],"metadata":{"id":"93CU1ZeDbZNt"}},{"cell_type":"code","source":["from transformers import Trainer\n","\n","class WeightedTrainer(Trainer):\n","    def compute_loss(self, model, inputs, return_outputs=False, num_items_in_batch=None):\n","        labels = inputs.pop(\"labels\")\n","        outputs = model(**inputs)\n","        logits = outputs.logits\n","\n","        loss = focal_loss(logits.view(-1, model.config.num_labels), labels.view(-1))\n","        return (loss, outputs) if return_outputs else loss\n","\n"],"metadata":{"id":"OJ5qK5Z_bdJ-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def save_metrics_to_csv(metrics_dict, file_path):\n","    file_exists = os.path.isfile(file_path)\n","    with open(file_path, mode='a', newline='') as file:\n","        writer = csv.DictWriter(file, fieldnames=metrics_dict.keys())\n","\n","        if not file_exists:\n","            writer.writeheader()  # Scrive l'intestazione solo se il file non esiste ancora\n","\n","        # Debug: Verifica che i dati vengano scritti\n","        print(f\"Saving to CSV: {metrics_dict}\")  # Aggiungi questa linea per il debug\n","        writer.writerow(metrics_dict)\n"],"metadata":{"id":"a5thJfiPbgp5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","import random\n","import torch\n","\n","np.random.seed(12345)\n","\n","random.seed(12345)\n","\n","torch.manual_seed(12345)\n","torch.cuda.manual_seed_all(12345)\n","\n","torch.backends.cudnn.deterministic = True\n","torch.backends.cudnn.benchmark = False\n","\n","from transformers import AutoModelForTokenClassification, Trainer, TrainingArguments, DataCollatorForTokenClassification\n","from sklearn.metrics import accuracy_score, f1_score\n","from transformers import AutoTokenizer\n","import torch\n","from datasets import Dataset\n","import csv\n","import os\n","import numpy as np\n","from tqdm.auto import tqdm\n","from google.colab import drive\n","\n","drive.mount('/content/drive')\n","\n","drive_path = '/content/drive/My Drive/Colab Notebooks/BERT TRIAL 2'\n","train_metrics_file = os.path.join(drive_path, 'train_metrics.csv')\n","val_metrics_file = os.path.join(drive_path, 'val_metrics.csv')\n","model_save_path = os.path.join(drive_path, 'final_model')\n","\n","model_ckpt = \"distilbert-base-uncased\"\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","tokenizer = AutoTokenizer.from_pretrained(model_ckpt)\n","model = AutoModelForTokenClassification.from_pretrained(model_ckpt, num_labels=21).to(device)\n","\n","data_collator = DataCollatorForTokenClassification(tokenizer)\n","\n","def compute_metrics(p):\n","    predictions, labels = p\n","    predictions = predictions.argmax(axis=-1).flatten()\n","    labels = labels.flatten()\n","\n","    mask = (labels != 20) & (labels != -100)\n","    filtered_labels = labels[mask]\n","    filtered_predictions = predictions[mask]\n","\n","    accuracy = accuracy_score(filtered_labels, filtered_predictions)\n","    f1_macro = f1_score(filtered_labels, filtered_predictions, average='macro')\n","    f1_weighted = f1_score(filtered_labels, filtered_predictions, average='weighted')\n","\n","    return {\n","    'accuracy': accuracy,\n","    'f1_macro': f1_macro,\n","    'f1_weighted': f1_weighted\n","    }\n","\n","\n","def save_metrics_to_csv(metrics_dict, file_path):\n","    file_exists = os.path.isfile(file_path)\n","    with open(file_path, mode='a', newline='') as file:\n","        writer = csv.DictWriter(file, fieldnames=metrics_dict.keys())\n","\n","        if not file_exists:\n","            writer.writeheader()  # Scrive l'intestazione solo se il file non esiste ancora\n","\n","        # Debug: Verifica che i dati vengano scritti\n","        print(f\"Saving to CSV: {metrics_dict}\")  # Aggiungi questa linea per il debug\n","        writer.writerow(metrics_dict)\n","\n","training_args = TrainingArguments(\n","    output_dir=os.path.join(drive_path, 'results'),\n","    num_train_epochs=3,\n","    per_device_train_batch_size=16,\n","    per_device_eval_batch_size=16,\n","    warmup_steps=130,\n","    weight_decay=0.01,\n","    logging_dir=os.path.join(drive_path, 'logs'),\n","    logging_steps=50,\n","    evaluation_strategy=\"epoch\",\n","    save_strategy=\"epoch\",\n","    save_total_limit=2,\n","    fp16=True,\n","    report_to=None\n",")\n","\n","trainer = WeightedTrainer(\n","    model=model,\n","    args=training_args,\n","    train_dataset=train_dataset,\n","    eval_dataset=val_dataset,\n","    compute_metrics=compute_metrics,\n","    data_collator=data_collator\n",")\n","\n","print(\"Starting training...\")\n","previous_val_loss = float('inf')\n","\n","for epoch in range(training_args.num_train_epochs):\n","    print(f\"Epoch {epoch + 1}/{training_args.num_train_epochs}\")\n","    trainer.train()\n","\n","    val_results = trainer.evaluate()\n","    val_loss = val_results['eval_loss']\n","    val_metrics = {\n","    \"epoch\": epoch + 1,\n","    \"eval_loss\": val_loss,\n","    \"eval_accuracy\": val_results.get('eval_accuracy', 'N/A'),  # Corretto\n","    \"eval_f1_macro\": val_results.get('eval_f1_macro', 'N/A'),  # Corretto\n","    \"eval_f1_weighted\": val_results.get('eval_f1_weighted', 'N/A')  # Corretto\n","    }\n","\n","\n","    save_metrics_to_csv(val_metrics, val_metrics_file)\n","\n","    # Log training loss\n","    if trainer.state.log_history and 'train_loss' in trainer.state.log_history[-1]:\n","        train_loss = trainer.state.log_history[-1]['train_loss']\n","    else:\n","        train_loss = 'N/A'\n","\n","    train_metrics = {\n","        \"epoch\": epoch + 1,\n","        \"train_loss\": train_loss\n","    }\n","    save_metrics_to_csv(train_metrics, train_metrics_file)\n","\n","    # Early stopping\n","    if val_loss > previous_val_loss:\n","        print(f\"Early stopping: validation loss increased from {previous_val_loss:.4f} a {val_loss:.4f} to {epoch + 1}.\")\n","        break\n","\n","    previous_val_loss = val_loss\n","\n","print(\"Saving final model...\")\n","model.save_pretrained(model_save_path)\n","tokenizer.save_pretrained(model_save_path)\n","print(f\"Model saved in: {model_save_path}\")\n","\n","# Report finale\n","print(\"Completed training. Final metrics saved.\")\n","\n"],"metadata":{"id":"Xau3phgbbj63"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["The provided code outlines the process of training a token classification model using the Hugging Face Transformers library with a custom setup. Here’s what happens step by step:\n","\n","The code sets the seed for reproducibility using numpy, random, and torch. This ensures that the results will be consistent across different runs of the script. The model and data are loaded from Google Drive, and the model checkpoint (distilbert-base-uncased) is set for the fine-tuning task. The device is set to use CUDA if available.\n","\n","The model, tokenizer, and data collator are initialized. The model is loaded as a token classification model with 21 labels, and the tokenizer is loaded to handle tokenization during training. The data collator helps manage how data is batched during training.\n","\n","The compute_metrics function computes accuracy and F1 scores (both macro and weighted) after each evaluation phase. This is used to assess model performance.\n","\n","Metrics are saved to CSV files after every epoch of evaluation using the save_metrics_to_csv function. This helps track training and validation metrics throughout the training process.\n","\n","Training parameters are defined using TrainingArguments. This includes settings like batch size, number of epochs, evaluation strategy, and logging frequency. Additionally, mixed-precision training is enabled to speed up training and reduce memory usage (fp16=True).\n","\n","The WeightedTrainer (presumably a custom trainer class, although it isn't defined here) is created to handle training and evaluation with the model, datasets, and compute metrics function. The training loop begins, and for each epoch, the model is trained, evaluated on the validation set, and the metrics are saved.\n","\n","If the validation loss increases compared to the previous epoch, early stopping is triggered, and training is stopped to prevent overfitting. The final model is saved to the specified directory after training finishes.\n","\n","This script is designed to save model checkpoints, track metrics, and implement early stopping to optimize model training for token classification tasks."],"metadata":{"id":"5a2vst8tbnr3"}},{"cell_type":"code","source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import os\n","\n","# Percorsi dei file\n","drive_path = \"/content/drive/My Drive/Colab Notebooks/BERT TRIAL 2\"\n","train_metrics_file = os.path.join(drive_path, \"train_metrics.csv\")\n","val_metrics_file = os.path.join(drive_path, \"val_metrics.csv\")\n","\n","# Caricamento dei dati\n","train_metrics = pd.read_csv(train_metrics_file)\n","val_metrics = pd.read_csv(val_metrics_file)\n","\n","# Aggiunta dei valori di train_loss\n","train_loss_values = [0.0699, 0.0227, 0.0087]\n","train_metrics[\"train_loss\"] = train_loss_values\n","\n","# Conversione delle colonne in formato numerico\n","train_metrics[\"train_loss\"] = pd.to_numeric(train_metrics[\"train_loss\"], errors=\"coerce\")\n","val_metrics[\"eval_loss\"] = pd.to_numeric(val_metrics[\"eval_loss\"], errors=\"coerce\")\n","val_metrics[\"eval_accuracy\"] = pd.to_numeric(val_metrics[\"eval_accuracy\"], errors=\"coerce\")\n","\n","# Creazione della cartella per salvare i grafici se non esiste\n","save_dir = '/content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2/plots'\n","os.makedirs(save_dir, exist_ok=True)\n","\n","# Plot per \"Train Loss\" e \"Validation Loss\"\n","fig, ax = plt.subplots(figsize=(10, 5), facecolor='#1E1E2F')  # Imposta lo sfondo del grafico\n","ax.plot(train_metrics[\"epoch\"], train_metrics[\"train_loss\"], label=\"Train Loss\", marker=\"o\", color=\"red\")  # Rosso per train_loss\n","ax.plot(val_metrics[\"epoch\"], val_metrics[\"eval_loss\"], label=\"Validation Loss\", marker=\"s\", color=\"yellow\")  # Giallo per val_loss\n","\n","ax.set_xlabel(\"Epoch\", fontsize=12, color='white')\n","ax.set_ylabel(\"Loss\", fontsize=12, color='white')\n","ax.set_title(\"Training Loss and Validation Loss\", fontsize=14, color='white')\n","ax.legend()\n","ax.grid(True, color='white')\n","\n","# Impostare lo sfondo del grafico e delle scritte\n","ax.set_facecolor('#1E1E2F')\n","fig.patch.set_facecolor('#1E1E2F')\n","\n","# Impostare il colore delle etichette degli assi e della griglia\n","ax.tick_params(axis='x', colors='white')\n","ax.tick_params(axis='y', colors='white')\n","\n","# Salvataggio del primo grafico\n","plt.tight_layout()\n","train_loss_plot_path = os.path.join(save_dir, 'train_validation_loss.png')\n","plt.savefig(train_loss_plot_path, facecolor=fig.get_facecolor())\n","plt.show()\n","\n","# Plot per \"Validation Accuracy\"\n","fig, ax = plt.subplots(figsize=(10, 5), facecolor='#1E1E2F')  # Imposta lo sfondo del grafico\n","ax.plot(val_metrics[\"epoch\"], val_metrics[\"eval_accuracy\"], label=\"Validation Accuracy\", marker=\"d\", color=\"green\")\n","\n","ax.set_xlabel(\"Epoch\", fontsize=12, color='white')\n","ax.set_ylabel(\"Accuracy\", fontsize=12, color='white')\n","ax.set_title(\"Evolution of Accuracy\", fontsize=14, color='white')\n","ax.legend()\n","ax.grid(True, color='white')\n","\n","# Impostare lo sfondo del grafico e delle scritte\n","ax.set_facecolor('#1E1E2F')\n","fig.patch.set_facecolor('#1E1E2F')\n","\n","# Impostare il colore delle etichette degli assi e della griglia\n","ax.tick_params(axis='x', colors='white')\n","ax.tick_params(axis='y', colors='white')\n","\n","# Salvataggio del secondo grafico\n","plt.tight_layout()\n","val_accuracy_plot_path = os.path.join(save_dir, 'validation_accuracy.png')\n","plt.savefig(val_accuracy_plot_path, facecolor=fig.get_facecolor())\n","plt.show()\n","\n","# Messaggio di conferma\n","print(f\"Grafici salvati in: {save_dir}\")\n"],"metadata":{"id":"-r8sT4Ixbvoj","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1739791909097,"user_tz":-60,"elapsed":2070,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"9b75d72d-383b-4b98-fdd9-bae602f9633e"},"execution_count":63,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"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BVIW52Crb3x1aXtgutA9cuT5PPzwPTz00J/JzV3LuHHXM3XqJM4553JKS8sbjf/lLyfgdO775CclJfHRR9P54IP5YeMWLFjIvff+IfTY4zHHesupUak83P/33L/it2HbDQwe6f97UqNS2+y1Y2NjueCCC3nhhedwu91cdtmo0L7u3XvwySfzyM39moSEBKZO/SdlZaXNDt1nnDGE7t178PDDDzJhwj243W5eeun5sDE9evSgoKCAuXM/pG/fvnz55ZeNluTKysomL28XGzduJCMjA5fL1WipsIsvvoRXXnmZRx55iNtuG095eTmPP/4XRo68NHRp+eEqKyvjiy8W8MILL3HccceF7bv00su4++7fUFlZybXX/pR///tf3H//b7n55luIi4tnzZrVnHLKKfTs2Yvbbx/PY489St++J3HMMcdTU1PN119/zU9/ej3R0dGcemo/3njjdbKzsykrK+Oll15sVn3du3fn008/4Sc/ORuLBV5++SWCwX2/nMjOzubSSy/nD394hPvvf4Djj+9Dfv5uysrKuOCChnkCbDYbl19+OS+88Bzdu3enX7/+LfpciYiIiEjnZlgMvGm1+85md6kFW/gkz46y6FDIjipwYfXbmjxW7NYkantVUtd9z7Jhey4rd21Navs30kZMt2TYLbfcwLRpM5kxYw5btnzPgw8+Rl1dPddcM6rJ8ZWVVRQXl4Y+zjrrDOrq6vngg3lh4zweX9i4qqrqo/BumueC7As5N3M4NkvDF57NYmN41nlckNP8SdRaavToK6iqqmLo0KFh91/feusvOfHEk7j99l9y880/JzU1jXPOObfZx7VarTz77PN4PB6uv/46/vjHP/DrX/8mbMzZZ5/Dz352A48//heuueYqVq/O5dZbwydaO++8EQwbdia33DKOs88+q8lly2JiYnjllb9RWVnJ9ddfy7333s3gwWfwwAMPHeZnY5/33nuXmJhYBg0a3Gjf4MFnEBUVzfvvv0dSUhKvvfY6tbW1jBv3c6677hpmznwHu73h91mXXXY59933AJMmTWLUqMu4445fsWPH9tCx/vSnRwkE/Fx33RiefPIJfv3rO5pV37333kdCQgI33vgz7rzz1wwdOowTTzwxbMzDDz/Ceeedz1/+8hijRl3Ko4/+kbq68Fn1R4++Ap/Px+WXjzqsz4+IiIiIdF4GBr6keqpP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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Grafici salvati in: /content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2/plots\n"]}]},{"cell_type":"markdown","source":["3) BERT TEST"],"metadata":{"id":"9O6sa5cCcvVE"}},{"cell_type":"code","source":["%reset -f"],"metadata":{"id":"MYBMNedZcxcU","executionInfo":{"status":"ok","timestamp":1739803287087,"user_tz":-60,"elapsed":362,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["Loading the model"],"metadata":{"id":"rSL6Qef1c8Tf"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","from transformers import AutoModelForTokenClassification, AutoTokenizer\n","import torch\n","\n","model_path = \"/content/drive/My Drive/Colab Notebooks/BERT TRIAL 2/final_model\"\n","\n","tokenizer = AutoTokenizer.from_pretrained(model_path)\n","model = AutoModelForTokenClassification.from_pretrained(model_path).to(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","model.to(\"cuda\")"],"metadata":{"id":"UfWuK8DfdCkM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739803347032,"user_tz":-60,"elapsed":56676,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"b41e37da-ea5e-4950-a148-51da8eb0db91"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]},{"output_type":"execute_result","data":{"text/plain":["DistilBertForTokenClassification(\n","  (distilbert): DistilBertModel(\n","    (embeddings): Embeddings(\n","      (word_embeddings): Embedding(30522, 768, padding_idx=0)\n","      (position_embeddings): Embedding(512, 768)\n","      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","      (dropout): Dropout(p=0.1, inplace=False)\n","    )\n","    (transformer): Transformer(\n","      (layer): ModuleList(\n","        (0-5): 6 x TransformerBlock(\n","          (attention): DistilBertSdpaAttention(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (q_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (k_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (v_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (out_lin): Linear(in_features=768, out_features=768, bias=True)\n","          )\n","          (sa_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","          (ffn): FFN(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (lin1): Linear(in_features=768, out_features=3072, bias=True)\n","            (lin2): Linear(in_features=3072, out_features=768, bias=True)\n","            (activation): GELUActivation()\n","          )\n","          (output_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","        )\n","      )\n","    )\n","  )\n","  (dropout): Dropout(p=0.1, inplace=False)\n","  (classifier): Linear(in_features=768, out_features=21, bias=True)\n",")"]},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","source":["Data preparation for test"],"metadata":{"id":"zq-Xu8VxdJuE"}},{"cell_type":"code","source":["pip install datasets"],"metadata":{"id":"LVXe_d2adKwJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739803355450,"user_tz":-60,"elapsed":3684,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"716edfdd-17c7-4d07-e9c5-1775ecb4623d"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting datasets\n","  Downloading datasets-3.3.0-py3-none-any.whl.metadata (19 kB)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from datasets) (3.17.0)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from datasets) (1.26.4)\n","Requirement already satisfied: pyarrow>=15.0.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (17.0.0)\n","Collecting dill<0.3.9,>=0.3.0 (from datasets)\n","  Downloading dill-0.3.8-py3-none-any.whl.metadata (10 kB)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from datasets) (2.2.2)\n","Requirement already satisfied: requests>=2.32.2 in /usr/local/lib/python3.11/dist-packages (from datasets) (2.32.3)\n","Requirement already satisfied: tqdm>=4.66.3 in /usr/local/lib/python3.11/dist-packages (from datasets) (4.67.1)\n","Collecting xxhash (from datasets)\n","  Downloading xxhash-3.5.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (12 kB)\n","Collecting multiprocess<0.70.17 (from datasets)\n","  Downloading multiprocess-0.70.16-py311-none-any.whl.metadata (7.2 kB)\n","Requirement already satisfied: fsspec<=2024.12.0,>=2023.1.0 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2024.12.0,>=2023.1.0->datasets) (2024.10.0)\n","Requirement already satisfied: aiohttp in /usr/local/lib/python3.11/dist-packages (from datasets) (3.11.12)\n","Requirement already satisfied: huggingface-hub>=0.24.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.28.1)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from datasets) (24.2)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from datasets) (6.0.2)\n","Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (2.4.6)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (1.3.2)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (25.1.0)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (1.5.0)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (6.1.0)\n","Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (0.2.1)\n","Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (1.18.3)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.24.0->datasets) (4.12.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (2.3.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (2025.1.31)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.1)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas->datasets) (1.17.0)\n","Downloading datasets-3.3.0-py3-none-any.whl (484 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m484.9/484.9 kB\u001b[0m \u001b[31m20.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading dill-0.3.8-py3-none-any.whl (116 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m116.3/116.3 kB\u001b[0m \u001b[31m11.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading multiprocess-0.70.16-py311-none-any.whl (143 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m143.5/143.5 kB\u001b[0m \u001b[31m14.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading xxhash-3.5.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (194 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m194.8/194.8 kB\u001b[0m \u001b[31m16.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: xxhash, dill, multiprocess, datasets\n","Successfully installed datasets-3.3.0 dill-0.3.8 multiprocess-0.70.16 xxhash-3.5.0\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import spacy\n","nlp = spacy.load('en_core_web_sm')\n","from spacy.tokens import Doc, Span\n","\n","import numpy as np\n","import os\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","drive_path = '/content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2'\n","file_path = os.path.join(drive_path, 'file1.ann')\n","file_path2 = os.path.join(drive_path, 'file2.ann')\n","\n","def create_dataframe(content):\n","    with open(content, 'r', encoding='utf-8') as file:\n","        lines = file.readlines()\n","    data = [line.split() for line in lines]\n","    df = pd.DataFrame(data, columns=['token', 'tag'])\n","    df = df.drop(index=df.index[0])\n","    return df\n","\n","df_file1 = create_dataframe(file_path)\n","df_file2 = create_dataframe(file_path2)\n","\n","df_file1 = pd.concat([df_file1, df_file2], ignore_index=True)\n","\n","def pulisci_df(df):\n","    def is_arabic(word):\n","        if word is None or pd.isnull(word):\n","            return True\n","        word = str(word)\n","        return any('\\u0600' <= char <= '\\u06FF' for char in word)\n","\n","    mask = df['token'].apply(is_arabic)\n","    return df[~mask]\n","\n","df_file1 = pulisci_df(df_file1)\n","df_file1 = df_file1.reset_index(drop=True)\n","\n","print(df_file1.head())\n","\n","def pulisci_file(df, column_name):\n","    result = df[column_name].str.cat(sep=' ')\n","    return result\n","\n","file1_text = pulisci_file(df_file1, 'token')\n","\n","doc1 = nlp(file1_text)\n","\n","from spacy.training import align\n","\n","original_tokens = df_file1[\"token\"].tolist()\n","spacy_tokens = [token.text for token in doc1]\n","\n","alignments = align.get_alignments(original_tokens, spacy_tokens)\n","\n","aligned_iob2 = [\"O\"] * len(spacy_tokens)\n","\n","for original_idx, spacy_indices in enumerate(alignments[0]):\n","    tag = df_file1[\"tag\"][original_idx]\n","    if len(spacy_indices) == 1:\n","        aligned_iob2[spacy_indices[0]] = tag\n","    else:\n","        for idx in spacy_indices:\n","            aligned_iob2[idx] = tag\n","\n","df_test = pd.DataFrame({'tokens': spacy_tokens, 'tag': aligned_iob2})\n","\n","def extract_entities(df, tag_column=\"tag\"):\n","    entities = []\n","    current_entity = None\n","\n","    for index, row in df.iterrows():\n","        tag = row[tag_column]\n","\n","        if tag.startswith(\"B-\"):  # Begin a new entity\n","            if current_entity:  # Save the previous entity\n","                entities.append(current_entity)\n","            entity_type = tag[2:]  # Extract the entity type\n","            current_entity = {\"type\": entity_type, \"start\": index, \"end\": index + 1}\n","\n","        elif tag.startswith(\"I-\") and current_entity:  # Inside an entity\n","            entity_type = tag[2:]\n","            if current_entity[\"type\"] == entity_type:  # Ensure it's the same entity type\n","                current_entity[\"end\"] = index + 1  # Extend the current entity\n","\n","        else:  # Outside any entity\n","            if current_entity:  # Save the current entity\n","                entities.append(current_entity)\n","                current_entity = None\n","\n","    # Add the last entity if it exists\n","    if current_entity:\n","        entities.append(current_entity)\n","\n","    return entities\n","\n","    # Extract entities\n","custom_entities = extract_entities(df_test)\n","\n","doc1.ents = [Span(doc1, entity[\"start\"], entity[\"end\"], label=entity[\"type\"]) for entity in custom_entities]\n","doc1.set_ents(doc1.ents, default=\"outside\")\n","\n","## CREATE A DF WITH GRAMMATICAL INFO AND TAG\n","data = []\n","for token in doc1:\n","    data.append([\n","        getattr(token, \"text\"),      # Token text\n","        getattr(token, \"lemma_\", None),   # Lemma\n","        getattr(token, \"pos_\", None),     # Part-of-speech tag\n","        getattr(token, \"dep_\", None),     # Dependency label\n","        getattr(token.head, \"text\", None),# Head text\n","        f\"{token.ent_iob_}-{token.ent_type_}\" if token.ent_type_ else \"O\"\n","    ])\n","\n","def join_and_clear(df, col_name, row1, row2):\n","    df.at[row1, col_name] = f\"{df.at[row1, col_name]} {df.at[row2, col_name]}\"\n","    df.loc[row2] = [None] * len(df.columns)\n","\n","df = pd.DataFrame(data, columns=[\"token\", \"Lemma\", \"POS\", \"DEP\", \"Head\", \"tag\"])\n","\n","#CREATE A DF WITH THE SENTENCES AND MATCHES\n","\n","data = []\n","\n","for sent in doc1.sents:\n","    sentence_text = sent.text\n","    iob_tags = []\n","    for token in sent:\n","        if token.ent_iob_ == \"O\":\n","            iob_tags.append(token.ent_iob_)\n","        else:\n","            iob_tags.append(token.ent_iob_ + \"-\" + token.ent_type_)\n","    iob_tags_str = ' '.join(iob_tags)\n","    data.append({\"sentence\": sentence_text, \"IOB_tag\": iob_tags_str})\n","\n","df1 = pd.DataFrame(data)\n","\n","from sklearn.model_selection import train_test_split\n","np.random.seed(42)\n","\n","train_sentences, temp_sentences, train_tags, temp_tags = train_test_split(\n","    df1[\"sentence\"], df1[\"IOB_tag\"], test_size=0.3, random_state=42\n",")\n","\n","val_sentences, test_sentences, val_tags, test_tags = train_test_split(\n","    temp_sentences, temp_tags, test_size=0.3333, random_state=42\n",")\n","\n","from transformers import AutoTokenizer\n","\n","tokenizer = AutoTokenizer.from_pretrained(\"distilbert-base-uncased\")\n","\n","def tokenize_and_align_labels(sentences, tags, tokenizer):\n","    tokenized_inputs = []\n","    aligned_labels = []\n","\n","    for sentence, tag_seq in zip(sentences, tags):\n","        # Tokenizza la frase\n","        sentence_tokens = sentence.split()\n","        tokenized_sentence = tokenizer(\n","            sentence_tokens,\n","            is_split_into_words=True,\n","            truncation=True,\n","            padding=\"max_length\"\n","        )\n","\n","        word_ids = tokenized_sentence.word_ids()\n","        aligned_tags = []\n","        current_word_idx = None\n","\n","\n","        for word_idx in word_ids:\n","            if word_idx is None:\n","                aligned_tags.append(\"O\")\n","            else:\n","                if word_idx != current_word_idx:\n","                    aligned_tags.append(tag_seq.split()[word_idx])\n","                else:\n","                    aligned_tags.append(tag_seq.split()[word_idx])\n","                current_word_idx = word_idx\n","\n","\n","        tokenized_inputs.append({\n","            \"input_ids\": tokenized_sentence[\"input_ids\"],\n","            \"attention_mask\": tokenized_sentence[\"attention_mask\"]\n","        })\n","        aligned_labels.append(aligned_tags)\n","\n","    return tokenized_inputs, aligned_labels\n","\n","train_tokenized, train_labels = tokenize_and_align_labels(train_sentences, train_tags, tokenizer)\n","val_tokenized, val_labels = tokenize_and_align_labels(val_sentences, val_tags, tokenizer)\n","test_tokenized, test_labels = tokenize_and_align_labels(test_sentences, test_tags, tokenizer)\n","\n","\n","from datasets import Dataset\n","import numpy as np\n","\n","train_dataset = Dataset.from_dict({\n","    'text': train_sentences,\n","    'labels': train_labels\n","})\n","\n","val_dataset = Dataset.from_dict({\n","    'text': val_sentences,\n","    'labels': val_labels\n","})\n","\n","test_dataset = Dataset.from_dict({\n","    'text': test_sentences,\n","    'labels': test_labels\n","})\n","def build_tag2unique(df, tag_column=\"IOB_tag\"):\n","    all_tags = df[tag_column].str.split().sum()\n","    unique_tags = set(all_tags)\n","    tag2unique = {tag: idx for idx, tag in enumerate(sorted(unique_tags))}\n","\n","    return tag2unique\n","\n","tag2unique = build_tag2unique(df1, tag_column=\"IOB_tag\")\n","print(\"tag2unique:\", tag2unique)\n","\n","def map_labels_to_numeric(example, tag2unique):\n","    example['labels'] = [tag2unique[tag] for tag in example['labels']]\n","    return example\n","\n","train_dataset = train_dataset.map(lambda x: map_labels_to_numeric(x, tag2unique))\n","val_dataset = val_dataset.map(lambda x: map_labels_to_numeric(x, tag2unique))\n","test_dataset = test_dataset.map(lambda x: map_labels_to_numeric(x, tag2unique))\n","\n","train_input_ids = [item[\"input_ids\"] for item in train_tokenized]\n","train_attention_mask = [item[\"attention_mask\"] for item in train_tokenized]\n","\n","val_input_ids = [item[\"input_ids\"] for item in val_tokenized]\n","val_attention_mask = [item[\"attention_mask\"] for item in val_tokenized]\n","\n","test_input_ids = [item[\"input_ids\"] for item in test_tokenized]\n","test_attention_mask = [item[\"attention_mask\"] for item in test_tokenized]\n","\n","\n","def add_tokenized_columns(dataset, tokenized_sentences):\n","    input_ids = [item['input_ids'] for item in tokenized_sentences]\n","    attention_mask = [item['attention_mask'] for item in tokenized_sentences]\n","\n","    dataset = dataset.add_column('input_ids', input_ids)\n","    dataset = dataset.add_column('attention_mask', attention_mask)\n","    return dataset\n","\n","train_dataset = add_tokenized_columns(train_dataset, train_tokenized)\n","val_dataset = add_tokenized_columns(val_dataset, val_tokenized)\n","test_dataset = add_tokenized_columns(test_dataset, test_tokenized)\n"],"metadata":{"id":"2B1qtHMSdNJW","colab":{"base_uri":"https://localhost:8080/","height":514,"referenced_widgets":["a880a58c70564bcc9042c3c947c6b3e6","7591868119c9434a8f5eff4a66c980a9","5258b8e90e6c4d379c20b9ac5207fbe0","892cb97eba604f60a8aedbef1eda8a9f","b0f906f0a95b44629d38082a1944e5cd","4abf635dc37f4291a96c3c64798530a7","eb31cad4a9984cf6baa40649160edcb9","edf3f74c3e2d447d867d00271d67fe8b","9ee86ad9b1b5493ab5689d00bed65a5a","272dc401cfae4a95943f1a13a97b8834","bfbf2ea572624a0fa0a7f740e504aecd","bba92530685f414d82a40a5244479c6d","f63453f5f98a49b18d08ee0821822690","1d6a88e8c0e6485dac0f6811a91bbd32","8a3cd7a8b4b74d9d91be7efe69ffa98d","8f545355f9744d54bd773d481362b7ba","afe6b20a020f44548015a6d149407e33","1914f9f497df49dbbae32eed8dfd5da5","47cf0e7e48f744c6bebf8a4727666946","9d68267b48f54cfcb1137b41a44748df","f06323bda2bd4736a503ea0592cc5586","17054c02452f4bdd881926b8f053c64b","7d8ddee4f3694cfa985cad7963227e54","4c87f36097994b588ad615ebe66ad56a","981b0a264faa4011a4fad858334e7533","4f75265e06bf45418e0ca1c9af4ba368","61b3018395864251a3ac2d64e99af6b9","7c887369e1844a4bb6ec5fe393b07e6b","40207d4cc0f04485b050c516f65f21af","a0687082a0b84871ac1c5a92c904205c","0a08f532c0b843bb98f7071df09ba628","84f16a86819e4ebbb730bd5402d48bf9","56df50c5666b474aa628875560deab41","3aaf55ae67c840a0872c5e304d48d06e","a607b56184ef4cbabe9478ca7d9b9de5","4643952542504201bc2cb76e60bf53d6","48ad0b6b6a8e495c82d16e0737744b56","071ae2fcf4094b168b73c97136e01af4","5cf4282b5130401dbed6fbd3aff23000","063ef7bc17c341948063d0eaac872a36","b4c0cbc635c84a6fa72a9359a1a6d186","14fae5cef38e4c69b471cecef4d9bdb7","5dd6d82521f6486b983c97a4fc3b5227","80501e0a5435458da2a552ac638329d8","3cc951284ccf47ad916f04dcfe410ce7","505bfaa693de4a68889e16aefa82de3f","5ee4c53b4ecb465e80c85b4c3ac397d5","2bba5f84989f4f33a0b1a09d6fcaa8f3","e3fe926aa84e46fc860957c49e47cd08","2b6cc865871741ec8aae701bb31570ba","f084acae4c3d4a778a8cc10e5080c6af","4f0ecf2580984bee9731995a918b3e53","28b302d060104edc9e987bf87608fc27","7c5f375ff5eb417381ef0d16a41ecb3e","aed3c1282d1d4172848b66f57f4a2f13","2138ef42b8b2444aaa272dbcee5057b5","ee3a2fc993894d218935ae120822fd88","38cd4a8aa0d2481caa1560c78a3b879b","756de94653584879b1188b69d2c3d443","40274e566eb54f57a014c82a5e44a173","817aad91716947c996d287576065d614","d3d8196da40f43b5a55119ded31d5409","eb1b51c0ac5d48009b8858662ef76ba8","ab5023ad44824b2aaa2b040abb2fed11","3cfc1ff9c5354c31bc1dced6379ea07a","ffbfa6e40a6b4b8ca1fd056d0bc2aae1","eeaf37a705c845f19889f1d374e33dde","b326f2357cfb4de287580702637858d4","4b6a3054e9334ea29e580a29f87c48e7","e2cc0f5cceba4b55a80a53811e6c06eb","157499ce0fa744ffa4f0f09a10ab2946","ee81f5534d7f42308fb1a7214d338c72","ff1a52d718ca4c7fa9af8f7744d95f51","81b3e2bef61d419188d952221743dc5e","118caec38491442e9ffa0203d6f7b880","09f62eb10ffe4bc3a9293cbc4d4bfb1b","84843e32d4e444e58f4d5241962edc9b"]},"executionInfo":{"status":"ok","timestamp":1739803468123,"user_tz":-60,"elapsed":15733,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"c760f01c-811f-4b62-a042-0fd7f0866840"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","       token tag\n","0  Operation   O\n","1      Steel   O\n","2    Curtain   O\n","3          (   O\n","4     Arabic   O\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n","The secret `HF_TOKEN` does not exist in your Colab secrets.\n","To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n","You will be able to reuse this secret in all of your notebooks.\n","Please note that authentication is recommended but still optional to access public models or datasets.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["tokenizer_config.json:   0%|          | 0.00/48.0 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a880a58c70564bcc9042c3c947c6b3e6"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["config.json:   0%|          | 0.00/483 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bba92530685f414d82a40a5244479c6d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7d8ddee4f3694cfa985cad7963227e54"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3aaf55ae67c840a0872c5e304d48d06e"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["tag2unique: {'B-DocumentReference': 0, 'B-Location': 1, 'B-MilitaryPlatform': 2, 'B-Money': 3, 'B-Nationality': 4, 'B-Organisation': 5, 'B-Person': 6, 'B-Quantity': 7, 'B-Temporal': 8, 'B-Weapon': 9, 'I-DocumentReference': 10, 'I-Location': 11, 'I-MilitaryPlatform': 12, 'I-Money': 13, 'I-Nationality': 14, 'I-Organisation': 15, 'I-Person': 16, 'I-Quantity': 17, 'I-Temporal': 18, 'I-Weapon': 19, 'O': 20}\n"]},{"output_type":"display_data","data":{"text/plain":["Map:   0%|          | 0/696 [00:00<?, ? examples/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3cc951284ccf47ad916f04dcfe410ce7"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Map:   0%|          | 0/199 [00:00<?, ? examples/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2138ef42b8b2444aaa272dbcee5057b5"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Map:   0%|          | 0/100 [00:00<?, ? examples/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"eeaf37a705c845f19889f1d374e33dde"}},"metadata":{}}]},{"cell_type":"code","source":["import torch\n","import numpy as np\n","from transformers import AutoModelForTokenClassification\n","from sklearn.metrics import accuracy_score, f1_score\n","from datasets import Dataset\n"],"metadata":{"id":"YKA-gCWkdVWh","executionInfo":{"status":"ok","timestamp":1739803469858,"user_tz":-60,"elapsed":320,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["def predict_tokens(test_dataset, model, tokenizer, tag2unique):\n","    unique2tag = {v: k for k, v in tag2unique.items()}  # Mappa inversa da numeri a etichette\n","\n","    predictions_list = []\n","    true_labels_list = []\n","\n","    for i in range(len(test_dataset)):\n","        input_ids = torch.tensor(test_dataset[\"input_ids\"][i]).unsqueeze(0).to(\"cuda\")\n","        attention_mask = torch.tensor(test_dataset[\"attention_mask\"][i]).unsqueeze(0).to(\"cuda\")\n","        true_labels = test_dataset[\"labels\"][i]  # Etichette vere\n","\n","        with torch.no_grad():\n","            outputs = model(input_ids, attention_mask=attention_mask)\n","\n","        predicted_labels = torch.argmax(outputs.logits, dim=-1).squeeze().cpu().numpy()\n","\n","        mask = np.array(true_labels) != -100\n","        true_labels = np.array(true_labels)[mask]\n","        predicted_labels = predicted_labels[mask]\n","\n","        predictions_list.extend([unique2tag[idx] for idx in predicted_labels])\n","        true_labels_list.extend([unique2tag[idx] for idx in true_labels])\n","\n","    return predictions_list, true_labels_list\n"],"metadata":{"id":"NRyvPp9_dYoq","executionInfo":{"status":"ok","timestamp":1739803474674,"user_tz":-60,"elapsed":531,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["The function predict_tokens is designed to make predictions for token classification tasks using a trained model, typically for sequence labeling such as Named Entity Recognition. It works with a test dataset that has already been tokenized and labeled.\n","\n","The first step is to create an inverse mapping from numerical labels back to their respective tag labels. This allows the model's output, which is in numerical form, to be converted back into understandable tags like \"B-PER\" or \"I-ORG\". Next, the function initializes two empty lists to store the predicted labels and the true labels.\n","\n","For each sample in the test dataset, the function retrieves the tokenized input ids and the attention mask, then moves them to the GPU. It also fetches the true labels for the current sample. The input is passed through the model to generate output logits. These logits are used to determine the predicted labels by selecting the class with the highest logit score for each token.\n","\n","The function then applies a mask to ignore padding tokens or other tokens marked with the label -100. This ensures that only relevant tokens are considered when comparing predictions to true labels. The numeric predicted and true labels are converted back to their tag string representation using the inverse mapping, and these are added to the respective lists.\n","\n","Finally, the function returns the lists of predicted and true labels, which can be compared later to evaluate the model's performance using metrics such as accuracy, F1-score, or confusion matrix. In summary, the function handles token-level predictions and compares them to the true labels for model evaluation."],"metadata":{"id":"LtqcRiOedc0o"}},{"cell_type":"code","source":["def compute_metrics(predictions, true_labels, tag2unique, ignore_index=-100):\n","    from sklearn.metrics import classification_report\n","    import numpy as np\n","\n","    all_predictions = []\n","    all_true_labels = []\n","\n","    for pred, true in zip(predictions, true_labels):\n","        pred = np.array(pred)\n","        true = np.array(true)\n","\n","        if pred.ndim == 0:\n","            pred = [pred]\n","\n","        if true.ndim == 0:\n","            true = [true]\n","\n","        all_predictions.extend(pred)\n","        all_true_labels.extend(true)\n","\n","    assert len(all_predictions) == len(all_true_labels), f\"Lunghezza mismatch dopo l'allineamento: {len(all_predictions)} vs {len(all_true_labels)}\"\n","\n","    mask = np.array(all_true_labels) != ignore_index\n","    mask &= np.array(all_true_labels) != 20\n","\n","    all_predictions = np.array(all_predictions)[mask]\n","    all_true_labels = np.array(all_true_labels)[mask]\n","\n","    classification_rep = classification_report(all_true_labels, all_predictions, output_dict=True)\n","\n","    metrics_df = pd.DataFrame(classification_rep).transpose()\n","\n","    return metrics_df\n"],"metadata":{"id":"BZh_wiYjdgZE","executionInfo":{"status":"ok","timestamp":1739803479408,"user_tz":-60,"elapsed":409,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":["\n","The function compute_metrics is designed to evaluate the performance of a token classification model by comparing predicted labels against true labels. The function uses the classification_report from scikit-learn to compute metrics such as precision, recall, and F1-score.\n","\n","It first initializes two empty lists: all_predictions and all_true_labels to store all predicted and true labels, respectively. The function iterates through each pair of predictions and true labels. If the prediction or true label is a single element (i.e., has no dimensions), it converts it into a list to ensure consistent processing.\n","\n","Next, the function combines all the predictions and true labels into the lists all_predictions and all_true_labels. It then checks if the lengths of these two lists match, ensuring that the number of predictions corresponds to the number of true labels.\n","\n","A mask is then applied to ignore certain values in the true labels. Specifically, the function filters out labels that are equal to ignore_index (usually for padding tokens) or 20, which could represent a special case like 'O' or a label to be ignored. The predictions and true labels are then filtered using this mask.\n","\n","Finally, the function uses classification_report to compute a variety of classification metrics such as precision, recall, F1-score, and support for each label. It returns these metrics as a pandas DataFrame for easy analysis.\n","\n","This function is useful for evaluating the quality of a model's predictions by comparing them to the ground truth in a detailed manner."],"metadata":{"id":"XeywD33sdktv"}},{"cell_type":"code","source":["predictions, true_labels = predict_tokens(test_dataset, model, tokenizer, tag2unique)\n","\n","metrics = compute_metrics(predictions, true_labels,tag2unique)\n","print(\"Metrics:\", metrics)\n"],"metadata":{"id":"NJ5YdVhRdp3p","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739803499119,"user_tz":-60,"elapsed":8881,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"0a608714-9efe-4520-f9a3-2e13a885c681"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Metrics:                      precision    recall  f1-score       support\n","B-DocumentReference   1.000000  0.250000  0.400000      8.000000\n","B-Location            0.747826  0.860000  0.800000    100.000000\n","B-MilitaryPlatform    0.000000  0.000000  0.000000      6.000000\n","B-Money               0.000000  0.000000  0.000000      4.000000\n","B-Nationality         0.000000  0.000000  0.000000      1.000000\n","B-Organisation        0.660494  0.792593  0.720539    135.000000\n","B-Person              0.836364  0.754098  0.793103     61.000000\n","B-Quantity            0.727273  0.695652  0.711111     23.000000\n","B-Temporal            0.882353  0.625000  0.731707     24.000000\n","B-Weapon              0.000000  0.000000  0.000000      6.000000\n","I-DocumentReference   0.750000  0.450000  0.562500     20.000000\n","I-Location            0.625000  0.744681  0.679612     94.000000\n","I-MilitaryPlatform    0.440000  0.916667  0.594595     12.000000\n","I-Money               0.375000  0.500000  0.428571      6.000000\n","I-Organisation        0.832579  0.888889  0.859813    207.000000\n","I-Person              0.765957  0.888889  0.822857     81.000000\n","I-Quantity            0.800000  0.750000  0.774194     16.000000\n","I-Temporal            0.733333  0.970588  0.835443     34.000000\n","I-Weapon              0.000000  0.000000  0.000000      0.000000\n","O                     0.998548  0.996962  0.997754  50362.000000\n","accuracy              0.993652  0.993652  0.993652      0.993652\n","macro avg             0.558736  0.554201  0.535590  51200.000000\n","weighted avg          0.994202  0.993652  0.993788  51200.000000\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]}]},{"cell_type":"code","source":["import random\n","\n","def predict_random_sentence(test_dataset, model, tokenizer, tag2unique):\n","    idx = random.randint(0, len(test_dataset) - 1)\n","    input_ids = torch.tensor(test_dataset[\"input_ids\"][idx]).unsqueeze(0).to(\"cuda\")\n","    attention_mask = torch.tensor(test_dataset[\"attention_mask\"][idx]).unsqueeze(0).to(\"cuda\")\n","\n","    sentence = test_dataset[\"text\"][idx]\n","    true_labels = test_dataset[\"labels\"][idx]\n","\n","    with torch.no_grad():\n","        outputs = model(input_ids, attention_mask=attention_mask)\n","\n","    predicted_labels = torch.argmax(outputs.logits, dim=-1).squeeze().cpu().numpy()\n","\n","    unique2tag = {v: k for k, v in tag2unique.items()}\n","    true_labels = [unique2tag[label] for label in true_labels if label != -100]\n","    predicted_labels = [unique2tag[label] for label in predicted_labels[:len(true_labels)]]\n","\n","    print(\"\\nrandom sentence:\\n\", sentence)\n","    print(\"True labels:\\n\", true_labels)\n","    print(\"Predicted labels:\\n\", predicted_labels)\n","\n","predict_random_sentence(test_dataset, model, tokenizer, tag2unique)\n"],"metadata":{"id":"US4ODEWNduoN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739803545065,"user_tz":-60,"elapsed":381,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"2c2f5596-2a75-4849-ae26-64660be21d2f"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","random sentence:\n"," Last week , we also announced that we would increase our humanitarian support to Iraq by £ 20 million , bringing our total contribution to £ 59 .\n","True labels:\n"," ['O', 'B-Temporal', 'I-Temporal', 'O', 'B-Organisation', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-Location', 'O', 'B-Money', 'I-Money', 'I-Money', 'O', 'O', 'O', 'O', 'O', 'O', 'B-Money', 'I-Money', 'I-Money', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']\n","Predicted labels:\n"," ['O', 'B-Temporal', 'I-Temporal', 'O', 'B-Organisation', 'O', 'O', 'O', 'B-Organisation', 'O', 'O', 'O', 'O', 'O', 'O', 'B-Organisation', 'O', 'I-Money', 'I-Money', 'I-Money', 'O', 'O', 'B-Organisation', 'O', 'O', 'O', 'I-Money', 'I-Money', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import confusion_matrix\n","import os\n","\n","def plot_confusion_matrix(cm, labels, save_dir):\n","    # Creazione della figura e impostazione dello sfondo blu scuro\n","    plt.figure(figsize=(10, 7), facecolor='#1E1E2F')\n","    ax = sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=labels, yticklabels=labels, cbar=False)\n","\n","    # Impostiamo le etichette degli assi e il titolo con scritte bianche\n","    ax.set_xlabel('Predicted', fontsize=12, color='white')\n","    ax.set_ylabel('True', fontsize=12, color='white')\n","    ax.set_title('Confusion Matrix', fontsize=14, color='white')\n","\n","    # Cambiare il colore delle etichette degli assi\n","    ax.tick_params(axis='x', colors='white')\n","    ax.tick_params(axis='y', colors='white')\n","\n","    # Impostiamo lo sfondo delle etichette e del grafico a blu scuro\n","    ax.set_facecolor('#1E1E2F')\n","    plt.tight_layout()  # Per evitare sovrapposizioni\n","\n","    # Salvataggio del grafico nella directory specificata\n","    confusion_matrix_plot_path = os.path.join(save_dir, 'confusion_matrix.png')\n","    plt.savefig(confusion_matrix_plot_path, facecolor='#1E1E2F')\n","    plt.show()\n","\n","    print(f\"Grafico salvato in: {confusion_matrix_plot_path}\")\n","\n","def compute_and_plot_confusion_matrix(predictions, true_labels, tag2unique, save_dir):\n","    unique2tag = {v: k for k, v in tag2unique.items()}\n","\n","    all_true_labels = []\n","    all_predictions = []\n","\n","    # Pre-elaborazione dei dati per la matrice di confusione\n","    for pred, true in zip(predictions, true_labels):\n","        mask = np.array(true) != 'O'\n","        filtered_true = np.array(true)[mask]\n","        filtered_pred = np.array(pred)[mask]\n","\n","        all_true_labels.extend(filtered_true)\n","        all_predictions.extend(filtered_pred)\n","\n","    # Creazione della matrice di confusione\n","    cm = confusion_matrix(all_true_labels, all_predictions, labels=[label for label in unique2tag.values() if label != 'O'])\n","\n","    # Chiamata alla funzione di plotting della matrice di confusione e salvataggio\n","    plot_confusion_matrix(cm, [label for label in unique2tag.values() if label != 'O'], save_dir)\n","\n","# Directory di salvataggio\n","save_dir = '/content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2/plots'\n","os.makedirs(save_dir, exist_ok=True)  # Crea la cartella se non esiste\n","\n","# Esegui il codice con i tuoi dati\n","compute_and_plot_confusion_matrix(predictions, true_labels, tag2unique, save_dir)\n"],"metadata":{"id":"KWjrl6E9dybc","colab":{"base_uri":"https://localhost:8080/","height":725},"executionInfo":{"status":"ok","timestamp":1739803901637,"user_tz":-60,"elapsed":2727,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"77155384-26ba-4695-ee7d-8395a34463e6"},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Grafico salvato in: /content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2/plots/confusion_matrix.png\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import os\n","\n","def plot_confusion_matrix(cm, labels, save_dir):\n","    # Normalizzare la matrice di confusione per mostrare percentuali\n","    cm_percentage = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis] * 100\n","\n","    # Impostare lo sfondo blu scuro\n","    plt.figure(figsize=(10, 7), facecolor='#1E1E2F')\n","    ax = sns.heatmap(cm_percentage, annot=True, fmt='.0f', cmap='Blues', xticklabels=labels, yticklabels=labels, cbar_kws={'label': 'Percentage'})\n","\n","    # Ridurre la dimensione dei caratteri delle annotazioni\n","    for text in ax.texts:\n","        text.set_fontsize(10)  # Modifica la dimensione del font delle annotazioni\n","\n","    # Impostiamo le etichette con scritte bianche\n","    ax.set_xlabel('Predicted', fontsize=12, color='white')\n","    ax.set_ylabel('True', fontsize=12, color='white')\n","    ax.set_title('Confusion Matrix (Percentage)', fontsize=14, color='white')\n","\n","    # Cambiamo il colore delle etichette degli assi\n","    ax.tick_params(axis='x', colors='white')\n","    ax.tick_params(axis='y', colors='white')\n","\n","    # Cambiamo il colore di sfondo dell'asse\n","    ax.set_facecolor('#1E1E2F')\n","    ax.collections[0].colorbar.ax.yaxis.set_tick_params(color='white')  # Cambia il colore dei tick della colorbar\n","    plt.setp(ax.collections[0].colorbar.ax.get_yticklabels(), color='white')  # Cambia il colore dei numeri della colorbar\n","\n","    # Salvataggio nella directory specificata\n","    plt.tight_layout()  # Evita sovrapposizioni\n","    confusion_matrix_plot_path = os.path.join(save_dir, 'confusion_matrix_percentage.png')\n","    plt.savefig(confusion_matrix_plot_path, facecolor='#1E1E2F')\n","    plt.show()\n","\n","    print(f\"Grafico salvato in: {confusion_matrix_plot_path}\")\n","\n","def compute_and_plot_confusion_matrix(predictions, true_labels, tag2unique, save_dir):\n","    unique2tag = {v: k for k, v in tag2unique.items()}\n","\n","    all_true_labels = []\n","    all_predictions = []\n","\n","    for pred, true in zip(predictions, true_labels):\n","        mask = np.array(true) != 'O'\n","        filtered_true = np.array(true)[mask]\n","        filtered_pred = np.array(pred)[mask]\n","\n","        all_true_labels.extend(filtered_true)\n","        all_predictions.extend(filtered_pred)\n","\n","    cm = confusion_matrix(all_true_labels, all_predictions, labels=[label for label in unique2tag.values() if label != 'O'])\n","\n","    plot_confusion_matrix(cm, [label for label in unique2tag.values() if label != 'O'], save_dir)\n","\n","# Directory di salvataggio\n","save_dir = '/content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2/plots'\n","os.makedirs(save_dir, exist_ok=True)  # Crea la cartella se non esiste\n","\n","# Esegui il codice con i tuoi dati\n","compute_and_plot_confusion_matrix(predictions, true_labels, tag2unique, save_dir)\n"],"metadata":{"id":"CZWZZ8xhd2ko","colab":{"base_uri":"https://localhost:8080/","height":761},"executionInfo":{"status":"ok","timestamp":1739805267185,"user_tz":-60,"elapsed":2414,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"090fd3cd-ca1a-47c4-ffdc-91bb377cc5df"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-22-9096f98b63e4>:9: RuntimeWarning: invalid value encountered in divide\n","  cm_percentage = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis] * 100\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x700 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Grafico salvato in: /content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2/plots/confusion_matrix_percentage.png\n"]}]},{"cell_type":"code","source":["import torch\n","from transformers import AutoTokenizer, AutoModelForTokenClassification\n","\n","model_path = \"/content/drive/My Drive/Colab Notebooks/BERT TRIAL 2/final_model\"\n","tokenizer = AutoTokenizer.from_pretrained(model_path)\n","model = AutoModelForTokenClassification.from_pretrained(model_path).to(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","\n","def predict_tags_for_sentence(sentence, model, tokenizer, tag2unique):\n","    model.eval()\n","\n","    tokens = sentence.split()\n","    inputs = tokenizer(tokens, is_split_into_words=True, return_tensors=\"pt\", truncation=True, padding=True).to(model.device)\n","\n","    with torch.no_grad():\n","        outputs = model(**inputs)\n","\n","    predicted_labels = torch.argmax(outputs.logits, dim=-1).squeeze().cpu().numpy()\n","\n","    unique2tag = {v: k for k, v in tag2unique.items()}\n","    predicted_tags = [unique2tag[label] for label in predicted_labels]\n","\n","    return list(zip(tokens, predicted_tags))\n","\n","\n","def main():\n","\n","    sentence = input(\"Insert a sentence: \")\n","\n","    print(\"Predictions for each token:\")\n","    predictions = predict_tags_for_sentence(sentence, model, tokenizer, tag2unique)\n","\n","    for token, tag in predictions:\n","        print(f\"Token: {token} - Label: {tag}\")\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"ZkGTAtI6d640","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739803638973,"user_tz":-60,"elapsed":5064,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"268efa44-f8c8-423a-894f-57e49e3f9b81"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Insert a sentence: bls\n","Predictions for each token:\n","Token: bls - Label: O\n"]}]},{"cell_type":"markdown","source":["# 4) DASHBOARD"],"metadata":{"id":"mG1NB0V8d-Iv"}},{"cell_type":"code","source":["%reset -f"],"metadata":{"id":"i-7e0Y_6klDo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pip install dash"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9xE6SHVGekZW","executionInfo":{"status":"ok","timestamp":1739388930447,"user_tz":-60,"elapsed":2640,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"2454c366-4439-457b-ebc5-a7263f7f1ed9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: dash in /usr/local/lib/python3.11/dist-packages (2.18.2)\n","Requirement already satisfied: Flask<3.1,>=1.0.4 in /usr/local/lib/python3.11/dist-packages (from dash) (3.0.3)\n","Requirement already satisfied: Werkzeug<3.1 in /usr/local/lib/python3.11/dist-packages (from dash) (3.0.6)\n","Requirement already satisfied: plotly>=5.0.0 in /usr/local/lib/python3.11/dist-packages (from dash) (5.24.1)\n","Requirement already satisfied: dash-html-components==2.0.0 in /usr/local/lib/python3.11/dist-packages (from dash) (2.0.0)\n","Requirement already satisfied: dash-core-components==2.0.0 in /usr/local/lib/python3.11/dist-packages (from dash) (2.0.0)\n","Requirement already satisfied: dash-table==5.0.0 in /usr/local/lib/python3.11/dist-packages (from dash) (5.0.0)\n","Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.11/dist-packages (from dash) (8.6.1)\n","Requirement already satisfied: typing-extensions>=4.1.1 in /usr/local/lib/python3.11/dist-packages (from dash) (4.12.2)\n","Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from dash) (2.32.3)\n","Requirement already satisfied: retrying in /usr/local/lib/python3.11/dist-packages (from dash) (1.3.4)\n","Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.11/dist-packages (from dash) (1.6.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from dash) (75.1.0)\n","Requirement already satisfied: Jinja2>=3.1.2 in /usr/local/lib/python3.11/dist-packages (from Flask<3.1,>=1.0.4->dash) (3.1.5)\n","Requirement already satisfied: itsdangerous>=2.1.2 in /usr/local/lib/python3.11/dist-packages (from Flask<3.1,>=1.0.4->dash) (2.2.0)\n","Requirement already satisfied: click>=8.1.3 in /usr/local/lib/python3.11/dist-packages (from Flask<3.1,>=1.0.4->dash) (8.1.8)\n","Requirement already satisfied: blinker>=1.6.2 in /usr/local/lib/python3.11/dist-packages (from Flask<3.1,>=1.0.4->dash) (1.9.0)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.11/dist-packages (from plotly>=5.0.0->dash) (9.0.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from plotly>=5.0.0->dash) (24.2)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from Werkzeug<3.1->dash) (3.0.2)\n","Requirement already satisfied: zipp>=3.20 in /usr/local/lib/python3.11/dist-packages (from importlib-metadata->dash) (3.21.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->dash) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->dash) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->dash) (2.3.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->dash) (2025.1.31)\n","Requirement already satisfied: six>=1.7.0 in /usr/local/lib/python3.11/dist-packages (from retrying->dash) (1.17.0)\n"]}]},{"cell_type":"code","source":["import dash\n","from dash import dcc, html\n","from flask import Flask, send_file\n","import webbrowser\n","from google.colab import drive\n","\n","# Monta Google Drive\n","drive.mount('/content/drive')\n","\n","# Percorso del grafico salvato\n","plot_path = '/content/drive/MyDrive/Colab Notebooks/BERT TRIAL 2/plots/pos_distribution.png'\n","\n","# Inizializza Flask come server principale\n","server = Flask(__name__)\n","\n","# Inizializza Dash con Flask come server\n","app = dash.Dash(__name__, server=server)\n","app.title = \"Defence Documents\"\n","\n","# Endpoint Flask per servire l'immagine\n","@server.route('/plot-image')\n","def serve_image():\n","    return send_file(plot_path, mimetype='image/png')\n","\n","# CSS personalizzato\n","custom_css = \"\"\"\n","<style>\n","/* CSS per il Dropdown */\n",".Select-control {\n","    background-color: #2C2C3E !important;\n","    color: white !important;\n","    border: 1px solid #444 !important;\n","    border-radius: 5px !important;\n","}\n","\n","/* Opzioni nel menu a tendina */\n",".Select-option {\n","    background-color: #2C2C3E !important;\n","    color: white !important;\n","}\n","\n","/* Quando l'opzione è selezionata */\n",".Select-option.is-selected {\n","    background-color: #34344A !important;\n","    color: white !important;\n","}\n","\n","/* Hover sopra l'opzione */\n",".Select-option:hover {\n","    background-color: #34344A !important;\n","    color: white !important;\n","}\n","\n","/* Menu a tendina aperto */\n",".Select-menu-outer {\n","    background-color: #2C2C3E !important;\n","    color: white !important;\n","    border: 1px solid #444 !important;\n","}\n","</style>\n","\"\"\"\n","\n","# Layout dell'app\n","app.layout = html.Div(\n","    style={'backgroundColor': '#1E1E2F', 'color': 'white', 'font-family': 'Arial, sans-serif', 'padding': '30px'},\n","    children=[\n","        html.H1(\"Analysis of Defence Documents\", style={'text-align': 'center'}),\n","\n","        # Inietta il CSS direttamente\n","        html.Div(dcc.Markdown(f\"<style>{custom_css}</style>\", dangerously_allow_html=True)),\n","\n","        # Dropdown per la selezione\n","        dcc.Dropdown(\n","            id='section-dropdown',\n","            options=[\n","                {'label': 'EDA', 'value': 'EDA'},\n","                {'label': 'Model 1', 'value': 'model1'},\n","                {'label': 'Model 2', 'value': 'model2'}\n","            ],\n","            value='EDA',\n","            style={\n","                'width': '30%',\n","                'padding': '10px',\n","                'font-size': '18px',\n","                'backgroundColor': '#2C2C3E',  # Sfondo dropdown chiuso\n","                'color': 'white',  # Testo dropdown chiuso\n","                'border': '1px solid #444',\n","                'border-radius': '5px'\n","            }\n","        ),\n","\n","        html.Div(id='eda-section', children=[], style={'display': 'block'}),\n","        html.Div(id='model1-section', children=[], style={'display': 'none'}),\n","        html.Div(id='model2-section', children=[], style={'display': 'none'}),\n","        html.Div(id='graph-output', children=[], style={'display': 'block'})\n","    ]\n",")\n","\n","# Callback per aggiornare la sezione selezionata\n","@app.callback(\n","    [\n","        dash.dependencies.Output('eda-section', 'style'),\n","        dash.dependencies.Output('model1-section', 'style'),\n","        dash.dependencies.Output('model2-section', 'style'),\n","        dash.dependencies.Output('graph-output', 'children')\n","    ],\n","    [dash.dependencies.Input('section-dropdown', 'value')]\n",")\n","def update_section(selected_section):\n","    eda_style = {'display': 'none'}\n","    model1_style = {'display': 'none'}\n","    model2_style = {'display': 'none'}\n","    graph_content = []\n","\n","    if selected_section == 'EDA':\n","        eda_style = {'display': 'block'}\n","        graph_content = [html.Img(src='/plot-image', style={'width': '80%'})]  # Usa l'endpoint Flask\n","    elif selected_section == 'model1':\n","        model1_style = {'display': 'block'}\n","    elif selected_section == 'model2':\n","        model2_style = {'display': 'block'}\n","\n","    return eda_style, model1_style, model2_style, graph_content\n","\n","if __name__ == '__main__':\n","    # Aprire automaticamente il browser\n","    webbrowser.open('http://127.0.0.1:8050', new=2)\n","    app.run_server(debug=True)  # Usa il server di Flask senza ngrok\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":689},"id":"kMBPkHdteW9M","executionInfo":{"status":"ok","timestamp":1739388936235,"user_tz":-60,"elapsed":2869,"user":{"displayName":"Lorenzo Ricciardulli","userId":"02438456850863679126"}},"outputId":"06570fed-2de9-46a3-dff0-c7b74846c0b3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["(async (port, path, width, height, cache, element) => {\n","    if (!google.colab.kernel.accessAllowed && !cache) {\n","      return;\n","    }\n","    element.appendChild(document.createTextNode(''));\n","    const url = await google.colab.kernel.proxyPort(port, {cache});\n","    const iframe = document.createElement('iframe');\n","    iframe.src = new URL(path, url).toString();\n","    iframe.height = height;\n","    iframe.width = width;\n","    iframe.style.border = 0;\n","    iframe.allow = [\n","        'accelerometer',\n","        'autoplay',\n","        'camera',\n","        'clipboard-read',\n","        'clipboard-write',\n","        'gyroscope',\n","        'magnetometer',\n","        'microphone',\n","        'serial',\n","        'usb',\n","        'xr-spatial-tracking',\n","    ].join('; ');\n","    element.appendChild(iframe);\n","  })(8050, \"/\", \"100%\", 650, false, window.element)"]},"metadata":{}}]}]}